(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{7509:function(t,s,e){t.exports=e.p+"assets/img/1654704494011.dba9740d.png"},7510:function(t,s,e){t.exports=e.p+"assets/img/1654704829919.9a3ae246.png"},7511:function(t,s,e){t.exports=e.p+"assets/img/1654705012954.d04235a1.png"},7512:function(t,s,e){t.exports=e.p+"assets/img/1654705167917.4e6ca97c.png"},7513:function(t,s,e){t.exports=e.p+"assets/img/1654705311842.f86b62fe.png"},7514:function(t,s,e){t.exports=e.p+"assets/img/1654705381340.dc69b372.png"},7515:function(t,s,e){t.exports=e.p+"assets/img/1654705488576.52900dba.png"},7516:function(t,s,e){t.exports=e.p+"assets/img/1654705568200.22986efe.png"},7517:function(t,s,e){t.exports=e.p+"assets/img/1654706293143.96bd1f79.png"},7518:function(t,s,e){t.exports=e.p+"assets/img/1654706472532.6465a02b.png"},7519:function(t,s,e){t.exports=e.p+"assets/img/1654706731323.e411ada7.png"},7520:function(t,s,e){t.exports=e.p+"assets/img/1654706835677.3b7d9826.png"},7521:function(t,s,e){t.exports=e.p+"assets/img/1654706913255.77737844.png"},7522:function(t,s,e){t.exports=e.p+"assets/img/1654707141888.27164647.png"},7523:function(t,s,e){t.exports=e.p+"assets/img/1654707433803.30db6efb.png"},7524:function(t,s,e){t.exports=e.p+"assets/img/1654707527187.fcf4a3e9.png"},7525:function(t,s,e){t.exports=e.p+"assets/img/1654707563970.3f8a4941.png"},7526:function(t,s,e){t.exports=e.p+"assets/img/1654707626007.397422cf.png"},7527:function(t,s,e){t.exports=e.p+"assets/img/1654707747465.d0f90f62.png"},7528:function(t,s,e){t.exports=e.p+"assets/img/1654707815304.4ae6222b.png"},7529:function(t,s,e){t.exports=e.p+"assets/img/1654708034006.cafba3cc.png"},7530:function(t,s,e){t.exports=e.p+"assets/img/1654707334582.65b7c1a8.png"},7531:function(t,s,e){t.exports=e.p+"assets/img/1654708141882.4025577b.png"},7532:function(t,s,e){t.exports=e.p+"assets/img/1654708166048.ff3de750.png"},7533:function(t,s,e){t.exports=e.p+"assets/img/1654708221015.97a59707.png"},7534:function(t,s,e){t.exports=e.p+"assets/img/1654708263000.d60cf14c.png"},7535:function(t,s,e){t.exports=e.p+"assets/img/1654708499791.5bb94f3a.png"},9174:function(t,s,e){"use strict";e.r(s);var a=e(5),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6-kubesphere-平台安装-全功能安装完成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-kubesphere-平台安装-全功能安装完成"}},[t._v("#")]),t._v(" 6.kubesphere-平台安装-全功能安装完成")]),t._v(" "),a("p",[t._v("​\t我们安装好了前置的环境后，我们现在就可以来安装kubesphere了，我们参照官方文档。")]),t._v(" "),a("p",[t._v("我们在之前的前置环境都已经满足以下条件")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7509),alt:"1654704494011"}})]),t._v(" "),a("h1",{attrs:{id:"安装kubesphere"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装kubesphere"}},[t._v("#")]),t._v(" 安装KubeSphere")]),t._v(" "),a("p",[t._v("https://kubesphere.com.cn/")]),t._v(" "),a("h2",{attrs:{id:"_1、下载核心文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、下载核心文件"}},[t._v("#")]),t._v(" 1、下载核心文件")]),t._v(" "),a("p",[t._v("这个yaml的文件最好我们先下载过来用wget命令下载--如果不能使用wget命令就安装一下wget")]),t._v(" "),a("p",[t._v("​\t\tyum install -y wget")]),t._v(" "),a("p",[t._v("如果下载不到，请复制附录的内容")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个是kubesphere的安装器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yaml\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个是集群的配置文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("下载好了--这个安装器没什么需要改的，主要是这个集群配置文件需要修改一下")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7510),alt:"1654704829919"}})]),t._v(" "),a("h2",{attrs:{id:"_2、修改cluster-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、修改cluster-configuration"}},[t._v("#")]),t._v(" 2、修改cluster-configuration")]),t._v(" "),a("p",[t._v("在 cluster-configuration.yaml中指定我们需要开启的功能")]),t._v(" "),a("p",[t._v("参照官网“启用可插拔组件”")]),t._v(" "),a("p",[t._v("https://kubesphere.com.cn/docs/pluggable-components/overview/")]),t._v(" "),a("p",[t._v("​\t其实我们需要修改的就是spec下面的东西，如persistence是存储相关的，如果我们没有默认存储，需要在storageClass指定存储类，如果我们有就什么也不用管")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7511),alt:"1654705012954"}})]),t._v(" "),a("p",[t._v("​\t然后接下来就是把我们所看到的false都改为true，所谓的改为true就是开启相关的功能")]),t._v(" "),a("p",[t._v("​\t例如这里改为true就是开启etcd的监控功能")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7512),alt:"1654705167917"}})]),t._v(" "),a("p",[t._v("这块的内容我们怎么知道这些代表什么呢，我们可以到官网--启用可插拔组件里查看一下")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7513),alt:"1654705311842"}})]),t._v(" "),a("p",[t._v("​\t比如我们需要应用商店--我们就点击对应的组件查阅文档")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7514),alt:"1654705381340"}})]),t._v(" "),a("p",[t._v("​\t然后给etcd的监控配一下ip地址，这个ip是master节点的ip而且是私域的ip地址")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7515),alt:"1654705488576"}})]),t._v(" "),a("p",[t._v("然后我们开启了redis，alerting-系统告警功能，注意es先不用开因为es需要认证用户名密码等等我们还没有es")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7516),alt:"1654705568200"}})]),t._v(" "),a("p",[t._v("​\tauditing审计功能，devops功能，events集群事件功能，logging日志功能，这些都打开，metrics-server这个不需要打开，因为我们前置环境已经安装过了，而且也千万不要打开因为kubesphere默认是从官方下载镜像的这个镜像一般下载不下来经常会导致安装失败")]),t._v(" "),a("p",[t._v("​\t还有network--网络策略打开--指定type：calico因为我们使用的网络插件就是calico。")]),t._v(" "),a("p",[t._v("​\t还有openprtrix--应用商店打开，servicemesh--微服务治理功能打开。")]),t._v(" "),a("p",[t._v("​\tkubeedge--边缘服务-这个是边缘计算使用的这个不需要打开，打开的话我们也体验不到，因为我们没有一些边缘计算的设备，也可以打开就是体验不到。")]),t._v(" "),a("p",[t._v("​\t然后wq退出保存")]),t._v(" "),a("h2",{attrs:{id:"_3、执行安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、执行安装"}},[t._v("#")]),t._v(" 3、执行安装")]),t._v(" "),a("p",[t._v("​\t执行安装--先是kubesphere的安装器yaml")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7517),alt:"1654706293143"}})]),t._v(" "),a("p",[t._v("​\t然后是kubesphere的集群配置的yaml应用")]),t._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("kubectl apply "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("f kubesphere"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("installer.yaml\n\nkubectl apply "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("f cluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("configuration.yaml\n\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("​\t然后我们查看一下kubesphere的安装过程")]),t._v(" "),a("p",[t._v("​\t首先是创建出安装器")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7518),alt:"1654706472532"}})]),t._v(" "),a("h2",{attrs:{id:"_4、检查安装日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、检查安装日志"}},[t._v("#")]),t._v(" 4、检查安装日志")]),t._v(" "),a("p",[t._v("​\t这个命令的作用就是我们可以检查集群安装到哪一步了，一个用于检查集群安装过程的日志")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath='{.items[0].metadata.name}') -f\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("如果发生这个错误就是说我们的安装器还没有安装好呢，等安装kubesphere好了才可以执行此命令")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7519),alt:"1654706731323"}})]),t._v(" "),a("p",[t._v("我们再次执行的时候就可以看到目前kubesphere的安装进度了")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7520),alt:"1654706835677"}})]),t._v(" "),a("p",[t._v("​\t比如这块可以看到一些汇总报告，这块不应该有失败的--然后下面start就是帮我们安装这些服务了开始")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7521),alt:"1654706913255"}})]),t._v(" "),a("p",[t._v("大概15分钟左右就安装好了")]),t._v(" "),a("p",[t._v("然后会有一个默认的账号和密码，还有默认端口是30880---注意安全策略组要放行这个端口，而且这个是访问任意集群机器的30880的端口都是可以的")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7522),alt:"1654707141888"}})]),t._v(" "),a("p",[t._v("访问任意机器的 30880端口")]),t._v(" "),a("p",[t._v("账号 ： admin")]),t._v(" "),a("p",[t._v("密码 ： P@88w0rd")]),t._v(" "),a("p",[t._v("登录前我们最好再确认一下，所有的Pod都是正常运转的")]),t._v(" "),a("p",[t._v("​\t例如--我们现在看到还有很多东西没有运行完成，我们就再等等")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7523),alt:"1654707433803"}})]),t._v(" "),a("p",[t._v("​\t如果我们等待了很久还是没有运行完成，那么就需要排查一下了")]),t._v(" "),a("p",[t._v("​\t例如这个Pod一直在创建中")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7524),alt:"1654707527187"}})]),t._v(" "),a("p",[t._v("​\t使用kubectl describe pod -n ***")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7525),alt:"1654707563970"}})]),t._v(" "),a("p",[t._v("​\t只要是Pulling image 就是正在下载镜像中--那还好并没有发生错误")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7526),alt:"1654707626007"}})]),t._v(" "),a("p",[t._v("​\t比如我们在检查到这个普罗米修斯的时候发现有点问题--他是用于监控功能的")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7527),alt:"1654707747465"}})]),t._v(" "),a("p",[t._v("​\t报挂载失败-faileMount---挂载失败的原因是，秘钥secret “kube-etcd-client-certs”这个秘钥没有找到")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7528),alt:"1654707815304"}})]),t._v(" "),a("p",[t._v("然后我们使用以下命令处理etcd这个文件找不到的报错--也就是 etcd监控证书找不到---"),a("strong",[t._v("这些问题都是在官方文档中有解决方案的")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("kubectl -n kubesphere-monitoring-system create secret generic kube-etcd-client-certs  --from-file=etcd-client-ca.crt=/etc/kubernetes/pki/etcd/ca.crt  --from-file=etcd-client.crt=/etc/kubernetes/pki/apiserver-etcd-client.crt  --from-file=etcd-client.key=/etc/kubernetes/pki/apiserver-etcd-client.key\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:e(7529),alt:"1654708034006"}})]),t._v(" "),a("p",[t._v("​\t然后我们继续等待，等待kubesphere的所有Pod都创建完成变为running")]),t._v(" "),a("p",[t._v("​\t我们使用任意集群机器的公网IP+端口访问")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7530),alt:"1654707334582"}})]),t._v(" "),a("p",[t._v("第一次登陆，还会提示我们修改密码")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7531),alt:"1654708141882"}})]),t._v(" "),a("p",[t._v("进入到了主界面")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7532),alt:"1654708166048"}})]),t._v(" "),a("p",[t._v("​\t点击平台管理")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7533),alt:"1654708221015"}})]),t._v(" "),a("p",[t._v("比如我们进入集群管理中")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7534),alt:"1654708263000"}})]),t._v(" "),a("p",[t._v("​\t之后我们再研究这些功能的使用")]),t._v(" "),a("p",[t._v("​\t至此：我们的kubesphere基于kubernetes的安装就完成了，如果大家觉得这个过程有点太麻烦，我们只是想把玩一下不想体验这么复杂的过程，我们在之后再了解一下如何在单节点或者是多节点在Linux上直接一键部署，也会安装的非常快。")]),t._v(" "),a("p",[t._v("​\t还有就是如果想快速体验也可以在官方点击demo，账号是demo1密码是Demo123")]),t._v(" "),a("p",[a("img",{attrs:{src:e(7535),alt:"1654708499791"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);