(window.webpackJsonp=window.webpackJsonp||[]).push([[355],{5846:function(t,s,a){t.exports=a.p+"assets/img/image-20220406223039131.2c868441.png"},5847:function(t,s,a){t.exports=a.p+"assets/img/image-20220406223310524.75025d48.png"},5848:function(t,s,a){t.exports=a.p+"assets/img/image-20220406223745571.f40f32ba.png"},5849:function(t,s,a){t.exports=a.p+"assets/img/image-20220406223817672.96d0f71d.png"},5850:function(t,s,a){t.exports=a.p+"assets/img/image-20220406223947855.db090506.png"},5851:function(t,s,a){t.exports=a.p+"assets/img/image-20220406224031406.ca4f496e.png"},5852:function(t,s,a){t.exports=a.p+"assets/img/image-20220406224312528.98f31061.png"},5853:function(t,s,a){t.exports=a.p+"assets/img/image-20220406224345192.d18e42e7.png"},5854:function(t,s,a){t.exports=a.p+"assets/img/image-20220406224532906.89b54fc2.png"},9333:function(t,s,a){"use strict";a.r(s);var e=a(5),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_13-静态成员"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-静态成员"}},[t._v("#")]),t._v(" 13.静态成员")]),t._v(" "),e("p",[t._v("​\t\t Static Members 静态成员")]),t._v(" "),e("p",[t._v("​\t\t静态成员和方法，使用static关键字，在面向对象编程中，类可以有俩种类型的成员，实例成员和静态成员")]),t._v(" "),e("p",[t._v("​\t\t实例成员属于实例或者是对象--当我们创建Employee对象时可以访问这些成员")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5846),alt:"image-20220406223039131"}})]),t._v(" "),e("p",[t._v("​\t静态成员：也称为类成员，例如现在我们Employee类没有静态成员，类直接点是没有东西的")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5847),alt:"image-20220406223310524"}})]),t._v(" "),e("p",[t._v("​\t那么你肯定会问，这个的目的是干什么的？这些成员我们什么时候用？我们在以下情况使用他们：")]),t._v(" "),e("p",[t._v("​\t例如，员工人数，这个人数不属于任何员工个人，这就是我们使用静态变量的地方")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5848),alt:"image-20220406223745571"}})]),t._v(" "),e("p",[e("img",{attrs:{src:a(5849),alt:"image-20220406223817672"}})]),t._v(" "),e("p",[t._v("那么我们现在创建一次对象就给员工人数+1")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5850),alt:"image-20220406223947855"}})]),t._v(" "),e("p",[t._v("然后我们打印一下员工人数：我们不用创建对象直接可以通过类访问他")]),t._v(" "),e("p",[t._v("​\t你将在所有对象中共用他")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5851),alt:"image-20220406224031406"}})]),t._v(" "),e("p",[t._v("​\t静态方法：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5852),alt:"image-20220406224312528"}})]),t._v(" "),e("p",[t._v("​")]),t._v(" "),e("p",[t._v("​\t我们可以直接通过类调用这个方法")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5853),alt:"image-20220406224345192"}})]),t._v(" "),e("p",[t._v("​\t在静态方法中是不能调用非静态方法的，因为他们属于实例方法，如果想访问我们必须创建对象后才可以访问")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5854),alt:"image-20220406224532906"}})]),t._v(" "),e("p",[t._v("​\t我们在静态方法中创建实例后可以访问实例方法，这个需要记住，这就是为什么声明在主类main方法是静态的，我们通过主类main实例化对象后就可以访问的原因")]),t._v(" "),e("p",[t._v("​\t为什么main方法是静态的，这是为了Java在运行时能够直接调用此方法，而无需必须创建一个新的对象，这就是为什么main方法始终为static的原因")]),t._v(" "),e("p",[t._v("​\t另外我们的系统类System 有一堆静态成员，在其中的静态字段out，在之后的Java类库中我们会看到很多的类都有静态成员的使用")]),t._v(" "),e("p",[t._v("​")])])}),[],!1,null,null,null);s.default=i.exports}}]);