(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{6740:function(t,s,a){t.exports=a.p+"assets/img/1651039953629.d423b427.png"},6741:function(t,s,a){t.exports=a.p+"assets/img/1651040434833.efd5da4f.png"},6742:function(t,s,a){t.exports=a.p+"assets/img/1651040679462.c53c36ed.png"},6743:function(t,s,a){t.exports=a.p+"assets/img/1651040772960.b43e2598.png"},6744:function(t,s,a){t.exports=a.p+"assets/img/1651042393303.a9290e31.png"},6745:function(t,s,a){t.exports=a.p+"assets/img/1651042444631.2fac1da2.png"},6746:function(t,s,a){t.exports=a.p+"assets/img/1651042501208.234f15f9.png"},6747:function(t,s,a){t.exports=a.p+"assets/img/1651042557005.5d4fc79c.png"},6748:function(t,s,a){t.exports=a.p+"assets/img/1651042721923.b2dd524a.png"},6749:function(t,s,a){t.exports=a.p+"assets/img/1651042837452.35b2bea5.png"},6750:function(t,s,a){t.exports=a.p+"assets/img/1651042983835.fd1b6017.png"},6751:function(t,s,a){t.exports=a.p+"assets/img/1651043189352.9bef1655.png"},8876:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_31-k8s核心实战-服务网络-service服务暴露nodeport方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_31-k8s核心实战-服务网络-service服务暴露nodeport方式"}},[t._v("#")]),t._v(" 31.k8s核心实战-服务网络-Service服务暴露NodePort方式")]),t._v(" "),e("p",[t._v("​\t\t我们使用默认的暴露发布的方式其实是ClusterIP方式，也就是集群IP方式，kubectl expose deploy deployName --port=集群端口 --target-port=容器端口 --type=默认是ClusterIP，默认也可以不写type类型，这种方式我们只能在集群内部访问。")]),t._v(" "),e("p",[t._v("​\t\t而我们如果真正想在公网上访问的话，我们还可以使用另外一种方式叫NodePort，这种方式是在集群外部也是可以进行访问的，翻译过来他叫节点端口，所谓的节点端口意思就是我接下来暴露的这个服务会在每个节点都开一个端口，这样的话就可以使用每个节点的公网IP加端口的方式访问了")]),t._v(" "),e("p",[t._v("​\t我们先把之前的service删除掉，免得后续影响我们实验")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6740),alt:"1651039953629"}})]),t._v(" "),e("p",[t._v("​\t我们重新暴露一下以类型为 NodePort的方式")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6741),alt:"1651040434833"}})]),t._v(" "),e("p",[t._v("​\t然后我们看一下这个Service，我们发现这个Service也会有集群IP地址，我们使用集群ip访问是没有问题的")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6742),alt:"1651040679462"}})]),t._v(" "),e("p",[t._v("​")]),t._v(" "),e("p",[t._v("​     我们发现我们的这个service多了30948的端口，这个端口是k8s随机为我们开的一个端口，而且这个端口最大的特点就是每台机器都开，所以为什么叫NodePort")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6743),alt:"1651040772960"}})]),t._v(" "),e("p",[t._v("​\t这样就相当于我们访问节点的IP+这个k8s给随机分配的端口我们就可以访问到我们的应用")]),t._v(" "),e("p",[t._v("​\t我们要注意这个端口是随机的但是也是有范围的，这个范围是在30000-32767之间")]),t._v(" "),e("p",[t._v("​\t所以为了我们访问方便，我们就在我们的服务器-安全组-添加规则")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6744),alt:"1651042393303"}})]),t._v(" "),e("p",[t._v("​\t我们开放30000-32767的端口")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6745),alt:"1651042444631"}})]),t._v(" "),e("p",[t._v("然后点击应用修改")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6746),alt:"1651042501208"}})]),t._v(" "),e("p",[t._v("​\tNodePort方式的图解：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6747),alt:"1651042557005"}})]),t._v(" "),e("p",[t._v("​\t比如我们现在拿master节点的Ip来进行一下请求")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6748),alt:"1651042721923"}})]),t._v(" "),e("p",[t._v("​\t我们切换一个浏览器访问，发现打印的是1111")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6749),alt:"1651042837452"}})]),t._v(" "),e("p",[t._v("​\t\t这就说明已经进行了负载均衡处理了")]),t._v(" "),e("p",[t._v("​\t任何集群公网IP都是可以进行访问的，我们使用node1节点的IP测试一下")]),t._v(" "),e("p",[t._v("​\t\t\t\t也是可以访问到我们的Pod的")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6750),alt:"1651042983835"}})]),t._v(" "),e("p",[t._v("​\t  我们暴露的这个Service除了我们使用机器端口能访问，剩下的特性也都还在，比如我们可以拿他的ip，也可以在Pod内使用他的域名")]),t._v(" "),e("p",[e("img",{attrs:{src:a(6751),alt:"1651043189352"}})]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("kubectl expose deployment my-dep --port=8000 --target-port=80 --type=NodePort\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("​\t文件的配置方式")]),t._v(" "),e("div",{staticClass:"language-yaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Service\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dep\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dep\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("targetPort")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("selector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dep\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NodePort\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])]),e("p",[t._v("NodePort范围在 30000-32767 之间")]),t._v(" "),e("p",[t._v("​")])])}),[],!1,null,null,null);s.default=n.exports}}]);