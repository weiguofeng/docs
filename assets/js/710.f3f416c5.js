(window.webpackJsonp=window.webpackJsonp||[]).push([[710],{8256:function(t,n,s){"use strict";s.r(n);var a=s(5),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_1斐波那契数列问题和跳台阶问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1斐波那契数列问题和跳台阶问题"}},[t._v("#")]),t._v(" 1斐波那契数列问题和跳台阶问题")]),t._v(" "),s("h3",{attrs:{id:"一-斐波那契数列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-斐波那契数列"}},[t._v("#")]),t._v(" 一 斐波那契数列")]),t._v(" "),s("h4",{attrs:{id:"题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" "),s("strong",[t._v("题目描述：")])]),t._v(" "),s("p",[t._v("大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。\nn<=39")]),t._v(" "),s("h4",{attrs:{id:"问题分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题分析"}},[t._v("#")]),t._v(" "),s("strong",[t._v("问题分析：")])]),t._v(" "),s("p",[t._v("可以肯定的是这一题通过递归的方式是肯定能做出来，但是这样会有一个很大的问题，那就是递归大量的重复计算会导致内存溢出。另外可以使用迭代法，用fn1和fn2保存计算过程中的结果，并复用起来。下面我会把两个方法示例代码都给出来并给出两个方法的运行时间对比。")]),t._v(" "),s("h4",{attrs:{id:"示例代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例代码：")])]),t._v(" "),s("p",[s("strong",[t._v("采用迭代法：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n  int Fibonacci(int number) {\n\t\t\tif (number <= 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (number == 1 || number == 2) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tint first = 1, second = 1, third = 0;\n\t\t\tfor (int i = 3; i <= number; i++) {\n\t\t\t\tthird = first + second;\n\t\t\t\tfirst = second;\n\t\t\t\tsecond = third;\n\t\t\t}\n\t\t\treturn third;\n\t\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[s("strong",[t._v("采用递归：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\t\t public int Fibonacci(int n) {\n           \n\t\t\tif (n <= 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (n == 1||n==2) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Fibonacci(n - 2) + Fibonacci(n - 1);\n\n\t\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("h4",{attrs:{id:"运行时间对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时间对比"}},[t._v("#")]),t._v(" "),s("strong",[t._v("运行时间对比：")])]),t._v(" "),s("p",[t._v("假设n为40我们分别使用迭代法和递归法计算，计算结果如下：")]),t._v(" "),s("ol",[s("li",[t._v("迭代法\n"),s("img",{attrs:{src:"https://ws1.sinaimg.cn/large/006rNwoDgy1fpydt5as85j308a025dfl.jpg",alt:"迭代法"}})]),t._v(" "),s("li",[t._v("递归法\n"),s("img",{attrs:{src:"https://ws1.sinaimg.cn/large/006rNwoDgy1fpydt2d1k3j30ed02kt8i.jpg",alt:"递归法"}})])]),t._v(" "),s("h3",{attrs:{id:"二-跳台阶问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-跳台阶问题"}},[t._v("#")]),t._v(" 二  跳台阶问题")]),t._v(" "),s("h4",{attrs:{id:"题目描述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述-2"}},[t._v("#")]),t._v(" "),s("strong",[t._v("题目描述：")])]),t._v(" "),s("p",[t._v("一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。")]),t._v(" "),s("h4",{attrs:{id:"问题分析-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题分析-2"}},[t._v("#")]),t._v(" "),s("strong",[t._v("问题分析：")])]),t._v(" "),s("p",[s("strong",[t._v("正常分析法：")]),t._v("\na.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);\nb.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)\nc.由a，b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)\nd.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2\n"),s("strong",[t._v("找规律分析法：")]),t._v("\nf(1) = 1, f(2) = 2, f(3) = 3, f(4) = 5，  可以总结出f(n) = f(n-1) + f(n-2)的规律。\n但是为什么会出现这样的规律呢？假设现在6个台阶，我们可以从第5跳一步到6，这样的话有多少种方案跳到5就有多少种方案跳到6，另外我们也可以从4跳两步跳到6，跳到4有多少种方案的话，就有多少种方案跳到6，其他的不能从3跳到6什么的啦，所以最后就是f(6) = f(5) + f(4)；这样子也很好理解变态跳台阶的问题了。")]),t._v(" "),s("p",[s("strong",[t._v("所以这道题其实就是斐波那契数列的问题。")]),t._v("\n代码只需要在上一题的代码稍做修改即可。和上一题唯一不同的就是这一题的初始元素变为 1 2 3 5 8.....而上一题为1 1 2  3 5 .......。另外这一题也可以用递归做，但是递归效率太低，所以我这里只给出了迭代方式的代码。")]),t._v(" "),s("h4",{attrs:{id:"示例代码-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例代码-2"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例代码：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n\tint jumpFloor(int number) {\n\t\t\tif (number <= 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (number == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (number == 2) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tint first = 1, second = 2, third = 0;\n\t\t\tfor (int i = 3; i <= number; i++) {\n\t\t\t\tthird = first + second;\n\t\t\t\tfirst = second;\n\t\t\t\tsecond = third;\n\t\t\t}\n\t\t\treturn third;\n\t\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("h3",{attrs:{id:"三-变态跳台阶问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-变态跳台阶问题"}},[t._v("#")]),t._v(" 三 变态跳台阶问题")]),t._v(" "),s("h4",{attrs:{id:"题目描述-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述-3"}},[t._v("#")]),t._v(" "),s("strong",[t._v("题目描述：")])]),t._v(" "),s("p",[t._v("一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。")]),t._v(" "),s("h4",{attrs:{id:"问题分析-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题分析-3"}},[t._v("#")]),t._v(" "),s("strong",[t._v("问题分析：")])]),t._v(" "),s("p",[t._v("假设n>=2，第一步有n种跳法：跳1级、跳2级、到跳n级\n跳1级，剩下n-1级，则剩下跳法是f(n-1)\n跳2级，剩下n-2级，则剩下跳法是f(n-2)\n......\n跳n-1级，剩下1级，则剩下跳法是f(1)\n跳n级，剩下0级，则剩下跳法是f(0)\n所以在n>=2的情况下：\nf(n)=f(n-1)+f(n-2)+...+f(1)\n因为f(n-1)=f(n-2)+f(n-3)+...+f(1)\n所以f(n)=2*f(n-1) 又f(1)=1,所以可得"),s("strong",[t._v("f(n)=2^(number-1)")])]),t._v(" "),s("h4",{attrs:{id:"示例代码-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例代码-3"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例代码：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("     int JumpFloorII(int number) {\n\t\treturn 1 << --number;//2^(number-1)用位移操作进行，更快\n\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h4",{attrs:{id:"补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" "),s("strong",[t._v("补充：")])]),t._v(" "),s("p",[s("strong",[t._v("java中有三种移位运算符：")])]),t._v(" "),s("ol",[s("li",[t._v("“<<” :     "),s("strong",[t._v("左移运算符")]),t._v("，等同于乘2的n次方")]),t._v(" "),s("li",[t._v("“>>”:     "),s("strong",[t._v("右移运算符")]),t._v("，等同于除2的n次方")]),t._v(" "),s("li",[t._v("“>>>” "),s("strong",[t._v("无符号右移运算符")]),t._v("，不管移动前最高位是0还是1，右移后左侧产生的空位部分都以0来填充。与>>类似。\n例：\nint a = 16;\nint b = a << 2;//左移2，等同于16 * 2的2次方，也就是16 * 4\nint c = a >> 2;//右移2，等同于16 / 2的2次方，也就是16 / 4")])])])}),[],!1,null,null,null);n.default=r.exports}}]);