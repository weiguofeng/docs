(window.webpackJsonp=window.webpackJsonp||[]).push([[577],{5813:function(t,s,r){t.exports=r.p+"assets/img/1635747359573.48effd4d.png"},5814:function(t,s,r){t.exports=r.p+"assets/img/1635748015897.49a65564.png"},5815:function(t,s,r){t.exports=r.p+"assets/img/1635748298214.572e03f6.png"},8775:function(t,s,r){"use strict";r.r(s);var a=r(5),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_7-方法引用的使用2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-方法引用的使用2"}},[t._v("#")]),t._v(" 7.方法引用的使用2")]),t._v(" "),a("p",[t._v("我们在第一种情况介绍的是：")]),t._v(" "),a("p",[a("img",{attrs:{src:r(5813),alt:"1635747359573"}})]),t._v(" "),a("p",[t._v("我们可以看出：Consume的方法 accept 的返回值是 void 和 形参是 T t，而我们需要实现实例的对象使用PrintStream 的方法 println 返回值也是void 形参 也是T t 那么对于这种的我们就可以使用方法引用了。情况一：都是非静态的方法。")]),t._v(" "),a("h4",{attrs:{id:"情况二-类-静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况二-类-静态方法"}},[t._v("#")]),t._v(" 情况二：类：：静态方法")]),t._v(" "),a("p",[t._v("比如：Comparator 中的 int compare （T, t1,T t2）")]),t._v(" "),a("p",[t._v("​\t\t\tInteger 中的 int compare（T t1,T t2）")]),t._v(" "),a("p",[a("img",{attrs:{src:r(5814),alt:"1635748015897"}})]),t._v(" "),a("p",[t._v("那么我们就有疑问了，为什么使用方法引用连形参都省略了，因为我们使用的形参是一致的")]),t._v(" "),a("p",[a("strong",[t._v("再次举例")])]),t._v(" "),a("p",[a("img",{attrs:{src:r(5815),alt:"1635748298214"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);