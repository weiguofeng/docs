(window.webpackJsonp=window.webpackJsonp||[]).push([[712],{8259:function(n,s,a){"use strict";a.r(s);var e=a(5),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_3数值的整数次方和调整数组元素顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3数值的整数次方和调整数组元素顺序"}},[n._v("#")]),n._v(" 3数值的整数次方和调整数组元素顺序")]),n._v(" "),a("h3",{attrs:{id:"一-数值的整数次方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-数值的整数次方"}},[n._v("#")]),n._v(" 一  数值的整数次方")]),n._v(" "),a("h4",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[n._v("#")]),n._v(" "),a("strong",[n._v("题目描述：")])]),n._v(" "),a("p",[n._v("给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。")]),n._v(" "),a("h4",{attrs:{id:"问题解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题解析"}},[n._v("#")]),n._v(" "),a("strong",[n._v("问题解析：")])]),n._v(" "),a("p",[n._v("这道题算是比较麻烦和难一点的一个了。我这里采用的是"),a("strong",[n._v("二分幂")]),n._v("思想，当然也可以采用"),a("strong",[n._v("快速幂")]),n._v("。\n更具剑指offer书中细节，该题的解题思路如下：\n1.当底数为0且指数<0时，会出现对0求倒数的情况，需进行错误处理，设置一个全局变量；\n2.判断底数是否等于0，由于base为double型，所以不能直接用==判断\n3.优化求幂函数（二分幂）。\n当n为偶数，a^n =（a^n/2）*（a^n/2）；\n当n为奇数，a^n = a^[(n-1)/2] * a^[(n-1)/2] * a。时间复杂度O(logn)")]),n._v(" "),a("p",[a("strong",[n._v("时间复杂度")]),n._v("：O(logn)")]),n._v(" "),a("h4",{attrs:{id:"示例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[n._v("#")]),n._v(" "),a("strong",[n._v("示例代码：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Solution { \n      boolean invalidInput=false;    \n      public double Power(double base, int exponent) {\n          //如果底数等于0并且指数小于0\n          //由于base为double型，不能直接用==判断\n        if(equal(base,0.0)&&exponent<0){\n            invalidInput=true;\n            return 0.0;\n        }\n        int absexponent=exponent;\n         //如果指数小于0，将指数转正\n        if(exponent<0)\n            absexponent=-exponent;\n         //getPower方法求出base的exponent次方。\n        double res=getPower(base,absexponent);\n         //如果指数小于0，所得结果为上面求的结果的倒数\n        if(exponent<0)\n            res=1.0/res;\n        return res;\n  }\n    //比较两个double型变量是否相等的方法\n    boolean equal(double num1,double num2){\n        if(num1-num2>-0.000001&&num1-num2<0.000001)\n            return true;\n        else\n            return false;\n    }\n    //求出b的e次方的方法\n    double getPower(double b,int e){\n        //如果指数为0，返回1\n        if(e==0)\n            return 1.0;\n        //如果指数为1，返回b\n        if(e==1)\n            return b;\n        //e>>1相等于e/2，这里就是求a^n =（a^n/2）*（a^n/2）\n        double result=getPower(b,e>>1);\n        result*=result;\n        //如果指数n为奇数，则要再乘一次底数base\n        if((e&1)==1)\n            result*=b;\n        return result;\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br")])]),a("p",[n._v("当然这一题也可以采用笨方法：累乘。不过这种方法的时间复杂度为O（n），这样没有前一种方法效率高。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    // 使用累乘\n    public double powerAnother(double base, int exponent) {\n        double result = 1.0;\n        for (int i = 0; i < Math.abs(exponent); i++) {\n            result *= base;\n        }\n        if (exponent >= 0)\n            return result;\n        else\n            return 1 / result;\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("h3",{attrs:{id:"二-调整数组顺序使奇数位于偶数前面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-调整数组顺序使奇数位于偶数前面"}},[n._v("#")]),n._v(" 二  调整数组顺序使奇数位于偶数前面")]),n._v(" "),a("h4",{attrs:{id:"题目描述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述-2"}},[n._v("#")]),n._v(" "),a("strong",[n._v("题目描述：")])]),n._v(" "),a("p",[n._v("输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。")]),n._v(" "),a("h4",{attrs:{id:"问题解析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题解析-2"}},[n._v("#")]),n._v(" "),a("strong",[n._v("问题解析：")])]),n._v(" "),a("p",[n._v("这道题有挺多种解法的，给大家介绍一种我觉得挺好理解的方法：\n我们首先统计奇数的个数假设为n,然后新建一个等长数组，然后通过循环判断原数组中的元素为偶数还是奇数。如果是则从数组下标0的元素开始，把该奇数添加到新数组；如果是偶数则从数组下标为n的元素开始把该偶数添加到新数组中。")]),n._v(" "),a("h4",{attrs:{id:"示例代码-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例代码-2"}},[n._v("#")]),n._v(" "),a("strong",[n._v("示例代码：")])]),n._v(" "),a("p",[n._v("时间复杂度为O（n），空间复杂度为O（n）的算法")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Solution {\n    public void reOrderArray(int [] array) {\n        //如果数组长度等于0或者等于1，什么都不做直接返回\n        if(array.length==0||array.length==1) \n            return;\n        //oddCount：保存奇数个数\n        //oddBegin：奇数从数组头部开始添加\n        int oddCount=0,oddBegin=0;\n        //新建一个数组\n        int[] newArray=new int[array.length];\n        //计算出（数组中的奇数个数）开始添加元素\n        for(int i=0;i<array.length;i++){\n            if((array[i]&1)==1) oddCount++;\n        }\n        for(int i=0;i<array.length;i++){\n            //如果数为基数新数组从头开始添加元素\n            //如果为偶数就从oddCount（数组中的奇数个数）开始添加元素\n            if((array[i]&1)==1) \n                newArray[oddBegin++]=array[i];\n            else newArray[oddCount++]=array[i];\n        }\n        for(int i=0;i<array.length;i++){\n            array[i]=newArray[i];\n        }\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);