(window.webpackJsonp=window.webpackJsonp||[]).push([[825],{9375:function(a,t,v){"use strict";v.r(t);var r=v(5),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"_3、java的堆栈和数据结构的堆栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、java的堆栈和数据结构的堆栈"}},[a._v("#")]),a._v(" 3、java的堆栈和数据结构的堆栈")]),a._v(" "),v("p",[a._v("Java 中的堆和栈与数据结构中的堆栈有些不同，其中堆和栈都是用于内存管理的概念，但是它们在Java中的应用与数据结构中的堆栈有所不同。")]),a._v(" "),v("p",[a._v("在 Java 中，堆和栈都是用于内存管理的概念，但是它们在 Java 中的应用与数据结构中的堆栈有所不同。")]),a._v(" "),v("p",[a._v("栈（Stack）是一种线性的数据结构，遵循后进先出（Last In First Out）的原则，是一个可以限定插入和删除只在栈顶进行的线性表。在 Java 中，每个线程都有自己的栈，用于存储方法调用的信息和局部变量等。当一个方法被调用时，它的参数和局部变量会被压入栈中；当方法执行完成时，这些数据会被弹出栈并被释放掉。栈的大小是有限的，但大小可以由 Java 虚拟机参数进行调整。")]),a._v(" "),v("p",[a._v("​\t\t栈--后进先出：")]),a._v(" "),v("p",[a._v("​\t\t\t\t相当于-- 我们有一个箱子，往里磊着放，那么最后放入进去的 是在最上面的，也就是在我们取的时候 最先拿到的书 是最后放进去的那本，而最先放的那本是被压底的那本，最后得到第一本书。")]),a._v(" "),v("p",[a._v("堆（Heap）是一个用于存储对象的运行时数据区域，是Java中的一块动态的内存空间，因此大小是不固定的。在 Java 中，所有的对象都在堆中分配，并且所有的线程都共享堆。通过垃圾回收器自动回收无用对象，进行内部碎片整理而得名，垃圾回收并不总是保证执行的时间。当 Java 虚拟机可用的内存不足时，会抛出 OutOfMemoryError 异常。")]),a._v(" "),v("p",[a._v("因此，Java 中的堆和栈与数据结构中的堆栈有些不同，但它们都是在 Java 内部用于管理内存的概念。")])])}),[],!1,null,null,null);t.default=e.exports}}]);