(window.webpackJsonp=window.webpackJsonp||[]).push([[879],{9650:function(n,s,a){"use strict";a.r(s);var e=a(5),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"arraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[n._v("#")]),n._v(" ArrayList")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#arraylist%E7%AE%80%E4%BB%8B"}},[n._v("ArrayList简介")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#arraylist%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81"}},[n._v("ArrayList核心源码")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"}},[n._v("ArrayList源码分析")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#systemarraycopy%E5%92%8Carrayscopyof%E6%96%B9%E6%B3%95"}},[n._v("System.arraycopy()和Arrays.copyOf()方法")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%A4%E8%80%85%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB"}},[n._v("两者联系与区别")])])])]),n._v(" "),a("li",[a("a",{attrs:{href:"#arraylist%E6%A0%B8%E5%BF%83%E6%89%A9%E5%AE%B9%E6%8A%80%E6%9C%AF"}},[n._v("ArrayList核心扩容技术")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E5%86%85%E9%83%A8%E7%B1%BB"}},[n._v("内部类")])])])]),n._v(" "),a("li",[a("a",{attrs:{href:"#arraylist%E7%BB%8F%E5%85%B8demo"}},[n._v("ArrayList经典Demo")])])]),n._v(" "),a("h3",{attrs:{id:"arraylist简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist简介"}},[n._v("#")]),n._v(" ArrayList简介")]),n._v(" "),a("p",[n._v("ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用"),a("code",[n._v("ensureCapacity")]),n._v("操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。")]),n._v(" "),a("p",[n._v("它继承于 "),a("strong",[n._v("AbstractList")]),n._v("，实现了 "),a("strong",[n._v("List")]),n._v(", "),a("strong",[n._v("RandomAccess")]),n._v(", "),a("strong",[n._v("Cloneable")]),n._v(", "),a("strong",[n._v("java.io.Serializable")]),n._v(" 这些接口。")]),n._v(" "),a("p",[n._v("在我们学数据结构的时候就知道了线性表的顺序存储，插入删除元素的时间复杂度为"),a("strong",[n._v("O（n）")]),n._v(",求表长以及增加元素，取第 i   元素的时间复杂度为"),a("strong",[n._v("O（1）")])]),n._v(" "),a("p",[n._v("ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。")]),n._v(" "),a("p",[n._v("ArrayList 实现了"),a("strong",[n._v("RandomAccess 接口")]),n._v("， RandomAccess 是一个标志接口，表明实现这个这个接口的 List 集合是支持"),a("strong",[n._v("快速随机访问")]),n._v("的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。")]),n._v(" "),a("p",[n._v("ArrayList 实现了"),a("strong",[n._v("Cloneable 接口")]),n._v("，即覆盖了函数 clone()，"),a("strong",[n._v("能被克隆")]),n._v("。")]),n._v(" "),a("p",[n._v("ArrayList 实现"),a("strong",[n._v("java.io.Serializable 接口")]),n._v("，这意味着ArrayList"),a("strong",[n._v("支持序列化")]),n._v("，"),a("strong",[n._v("能通过序列化去传输")]),n._v("。")]),n._v(" "),a("p",[n._v("和 Vector 不同，"),a("strong",[n._v("ArrayList 中的操作不是线程安全的")]),n._v("！所以，建议在单线程中才使用 ArrayList，而在多线程中可以选择 Vector 或者  CopyOnWriteArrayList。")]),n._v(" "),a("h3",{attrs:{id:"arraylist核心源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist核心源码"}},[n._v("#")]),n._v(" ArrayList核心源码")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\n\npackage java.util;\n\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.function.UnaryOperator;\n\n\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * 默认初始容量大小\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * 空数组（用于空实例）。\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n\n     //用于默认大小空实例的共享空数组实例。\n      //我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    /**\n     * 保存ArrayList数据的数组\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n\n    /**\n     * ArrayList 所包含的元素个数\n     */\n    private int size;\n\n    /**\n     * 带初始容量参数的构造函数。（用户自己指定容量）\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity > 0) {\n            //创建initialCapacity大小的数组\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            //创建空数组\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException("Illegal Capacity: "+\n                                               initialCapacity);\n        }\n    }\n\n    /**\n     *默认构造函数，DEFAULTCAPACITY_EMPTY_ELEMENTDATA 为0.初始化为10，也就是说初始其实是空数组 当添加第一个元素的时候数组容量才变成10\n     */\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。\n     */\n    public ArrayList(Collection<? extends E> c) {\n        //\n        elementData = c.toArray();\n        //如果指定集合元素个数不为0\n        if ((size = elementData.length) != 0) {\n            // c.toArray 可能返回的不是Object类型的数组所以加上下面的语句用于判断，\n            //这里用到了反射里面的getClass()方法\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // 用空数组代替\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n    /**\n     * 修改这个ArrayList实例的容量是列表的当前大小。 应用程序可以使用此操作来最小化ArrayList实例的存储。 \n     */\n    public void trimToSize() {\n        modCount++;\n        if (size < elementData.length) {\n            elementData = (size == 0)\n              ? EMPTY_ELEMENTDATA\n              : Arrays.copyOf(elementData, size);\n        }\n    }\n//下面是ArrayList的扩容机制\n//ArrayList的扩容机制提高了性能，如果每次只扩充一个，\n//那么频繁的插入会导致频繁的拷贝，降低性能，而ArrayList的扩容机制避免了这种情况。\n    /**\n     * 如有必要，增加此ArrayList实例的容量，以确保它至少能容纳元素的数量\n     * @param   minCapacity   所需的最小容量\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n            // any size if not default element table\n            ? 0\n            // larger than default for default empty table. It\'s already\n            // supposed to be at default size.\n            : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n   //得到最小扩容量\n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n              // 获取默认的容量和传入参数的较大值\n            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n\n        ensureExplicitCapacity(minCapacity);\n    }\n  //判断是否需要扩容\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            //调用grow方法进行扩容，调用此方法代表已经开始扩容了\n            grow(minCapacity);\n    }\n\n    /**\n     * 要分配的最大数组大小\n     */\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    /**\n     * ArrayList扩容的核心方法。\n     */\n    private void grow(int minCapacity) {\n        // oldCapacity为旧容量，newCapacity为新容量\n        int oldCapacity = elementData.length;\n        //将oldCapacity 右移一位，其效果相当于oldCapacity /2，\n        //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        //再检查新容量是否超出了ArrayList所定义的最大容量，\n        //若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，\n        //如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n    //比较minCapacity和 MAX_ARRAY_SIZE\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n\n    /**\n     *返回此列表中的元素数。 \n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 如果此列表不包含元素，则返回 true 。\n     */\n    public boolean isEmpty() {\n        //注意=和==的区别\n        return size == 0;\n    }\n\n    /**\n     * 如果此列表包含指定的元素，则返回true 。\n     */\n    public boolean contains(Object o) {\n        //indexOf()方法：返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1 \n        return indexOf(o) >= 0;\n    }\n\n    /**\n     *返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1 \n     */\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                //equals()方法比较\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。.\n     */\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size-1; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = size-1; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 返回此ArrayList实例的浅拷贝。 （元素本身不被复制。） \n     */\n    public Object clone() {\n        try {\n            ArrayList<?> v = (ArrayList<?>) super.clone();\n            //Arrays.copyOf功能是实现数组的复制，返回复制后的数组。参数是被复制的数组和复制的长度\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // 这不应该发生，因为我们是可以克隆的\n            throw new InternalError(e);\n        }\n    }\n\n    /**\n     *以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。 \n     *返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。\n     *因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。\n     */\n    public Object[] toArray() {\n        return Arrays.copyOf(elementData, size);\n    }\n\n    /**\n     * 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; \n     *返回的数组的运行时类型是指定数组的运行时类型。 如果列表适合指定的数组，则返回其中。 \n     *否则，将为指定数组的运行时类型和此列表的大小分配一个新数组。 \n     *如果列表适用于指定的数组，其余空间（即数组的列表数量多于此元素），则紧跟在集合结束后的数组中的元素设置为null 。\n     *（这仅在调用者知道列表不包含任何空元素的情况下才能确定列表的长度。） \n     */\n    @SuppressWarnings("unchecked")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // 新建一个运行时类型的数组，但是ArrayList数组的内容\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n            //调用System提供的arraycopy()方法实现数组之间的复制\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }\n\n    // Positional Access Operations\n\n    @SuppressWarnings("unchecked")\n    E elementData(int index) {\n        return (E) elementData[index];\n    }\n\n    /**\n     * 返回此列表中指定位置的元素。\n     */\n    public E get(int index) {\n        rangeCheck(index);\n\n        return elementData(index);\n    }\n\n    /**\n     * 用指定的元素替换此列表中指定位置的元素。 \n     */\n    public E set(int index, E element) {\n        //对index进行界限检查\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        //返回原来在这个位置的元素\n        return oldValue;\n    }\n\n    /**\n     * 将指定的元素追加到此列表的末尾。 \n     */\n    public boolean add(E e) {\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        //这里看到ArrayList添加元素的实质就相当于为数组赋值\n        elementData[size++] = e;\n        return true;\n    }\n\n    /**\n     * 在此列表中的指定位置插入指定的元素。 \n     *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；\n     *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        //arraycopy()这个实现数组之间复制的方法一定要看一下，下面就用到了arraycopy()方法实现数组自己复制自己\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        elementData[index] = element;\n        size++;\n    }\n\n    /**\n     * 删除该列表中指定位置的元素。 将任何后续元素移动到左侧（从其索引中减去一个元素）。 \n     */\n    public E remove(int index) {\n        rangeCheck(index);\n\n        modCount++;\n        E oldValue = elementData(index);\n\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n      //从列表中删除的元素 \n        return oldValue;\n    }\n\n    /**\n     * 从列表中删除指定元素的第一个出现（如果存在）。 如果列表不包含该元素，则它不会更改。\n     *返回true，如果此列表包含指定的元素\n     */\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index < size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\n    /*\n     * Private remove method that skips bounds checking and does not\n     * return the value removed.\n     */\n    private void fastRemove(int index) {\n        modCount++;\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n    }\n\n    /**\n     * 从列表中删除所有元素。 \n     */\n    public void clear() {\n        modCount++;\n\n        // 把数组中所有的元素的值设为null\n        for (int i = 0; i < size; i++)\n            elementData[i] = null;\n\n        size = 0;\n    }\n\n    /**\n     * 按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾。\n     */\n    public boolean addAll(Collection<? extends E> c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 将指定集合中的所有元素插入到此列表中，从指定的位置开始。\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n\n        int numMoved = size - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                             numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 从此列表中删除所有索引为fromIndex （含）和toIndex之间的元素。\n     *将任何后续元素移动到左侧（减少其索引）。\n     */\n    protected void removeRange(int fromIndex, int toIndex) {\n        modCount++;\n        int numMoved = size - toIndex;\n        System.arraycopy(elementData, toIndex, elementData, fromIndex,\n                         numMoved);\n\n        // clear to let GC do its work\n        int newSize = size - (toIndex-fromIndex);\n        for (int i = newSize; i < size; i++) {\n            elementData[i] = null;\n        }\n        size = newSize;\n    }\n\n    /**\n     * 检查给定的索引是否在范围内。\n     */\n    private void rangeCheck(int index) {\n        if (index >= size)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    /**\n     * add和addAll使用的rangeCheck的一个版本\n     */\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    /**\n     * 返回IndexOutOfBoundsException细节信息\n     */\n    private String outOfBoundsMsg(int index) {\n        return "Index: "+index+", Size: "+size;\n    }\n\n    /**\n     * 从此列表中删除指定集合中包含的所有元素。 \n     */\n    public boolean removeAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        //如果此列表被修改则返回true\n        return batchRemove(c, false);\n    }\n\n    /**\n     * 仅保留此列表中包含在指定集合中的元素。\n     *换句话说，从此列表中删除其中不包含在指定集合中的所有元素。 \n     */\n    public boolean retainAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        return batchRemove(c, true);\n    }\n\n\n    /**\n     * 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。\n     *指定的索引表示初始调用将返回的第一个元素为next 。 初始调用previous将返回指定索引减1的元素。 \n     *返回的列表迭代器是fail-fast 。 \n     */\n    public ListIterator<E> listIterator(int index) {\n        if (index < 0 || index > size)\n            throw new IndexOutOfBoundsException("Index: "+index);\n        return new ListItr(index);\n    }\n\n    /**\n     *返回列表中的列表迭代器（按适当的顺序）。 \n     *返回的列表迭代器是fail-fast 。\n     */\n    public ListIterator<E> listIterator() {\n        return new ListItr(0);\n    }\n\n    /**\n     *以正确的顺序返回该列表中的元素的迭代器。 \n     *返回的迭代器是fail-fast 。 \n     */\n    public Iterator<E> iterator() {\n        return new Itr();\n    }\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br"),a("span",{staticClass:"line-number"},[n._v("122")]),a("br"),a("span",{staticClass:"line-number"},[n._v("123")]),a("br"),a("span",{staticClass:"line-number"},[n._v("124")]),a("br"),a("span",{staticClass:"line-number"},[n._v("125")]),a("br"),a("span",{staticClass:"line-number"},[n._v("126")]),a("br"),a("span",{staticClass:"line-number"},[n._v("127")]),a("br"),a("span",{staticClass:"line-number"},[n._v("128")]),a("br"),a("span",{staticClass:"line-number"},[n._v("129")]),a("br"),a("span",{staticClass:"line-number"},[n._v("130")]),a("br"),a("span",{staticClass:"line-number"},[n._v("131")]),a("br"),a("span",{staticClass:"line-number"},[n._v("132")]),a("br"),a("span",{staticClass:"line-number"},[n._v("133")]),a("br"),a("span",{staticClass:"line-number"},[n._v("134")]),a("br"),a("span",{staticClass:"line-number"},[n._v("135")]),a("br"),a("span",{staticClass:"line-number"},[n._v("136")]),a("br"),a("span",{staticClass:"line-number"},[n._v("137")]),a("br"),a("span",{staticClass:"line-number"},[n._v("138")]),a("br"),a("span",{staticClass:"line-number"},[n._v("139")]),a("br"),a("span",{staticClass:"line-number"},[n._v("140")]),a("br"),a("span",{staticClass:"line-number"},[n._v("141")]),a("br"),a("span",{staticClass:"line-number"},[n._v("142")]),a("br"),a("span",{staticClass:"line-number"},[n._v("143")]),a("br"),a("span",{staticClass:"line-number"},[n._v("144")]),a("br"),a("span",{staticClass:"line-number"},[n._v("145")]),a("br"),a("span",{staticClass:"line-number"},[n._v("146")]),a("br"),a("span",{staticClass:"line-number"},[n._v("147")]),a("br"),a("span",{staticClass:"line-number"},[n._v("148")]),a("br"),a("span",{staticClass:"line-number"},[n._v("149")]),a("br"),a("span",{staticClass:"line-number"},[n._v("150")]),a("br"),a("span",{staticClass:"line-number"},[n._v("151")]),a("br"),a("span",{staticClass:"line-number"},[n._v("152")]),a("br"),a("span",{staticClass:"line-number"},[n._v("153")]),a("br"),a("span",{staticClass:"line-number"},[n._v("154")]),a("br"),a("span",{staticClass:"line-number"},[n._v("155")]),a("br"),a("span",{staticClass:"line-number"},[n._v("156")]),a("br"),a("span",{staticClass:"line-number"},[n._v("157")]),a("br"),a("span",{staticClass:"line-number"},[n._v("158")]),a("br"),a("span",{staticClass:"line-number"},[n._v("159")]),a("br"),a("span",{staticClass:"line-number"},[n._v("160")]),a("br"),a("span",{staticClass:"line-number"},[n._v("161")]),a("br"),a("span",{staticClass:"line-number"},[n._v("162")]),a("br"),a("span",{staticClass:"line-number"},[n._v("163")]),a("br"),a("span",{staticClass:"line-number"},[n._v("164")]),a("br"),a("span",{staticClass:"line-number"},[n._v("165")]),a("br"),a("span",{staticClass:"line-number"},[n._v("166")]),a("br"),a("span",{staticClass:"line-number"},[n._v("167")]),a("br"),a("span",{staticClass:"line-number"},[n._v("168")]),a("br"),a("span",{staticClass:"line-number"},[n._v("169")]),a("br"),a("span",{staticClass:"line-number"},[n._v("170")]),a("br"),a("span",{staticClass:"line-number"},[n._v("171")]),a("br"),a("span",{staticClass:"line-number"},[n._v("172")]),a("br"),a("span",{staticClass:"line-number"},[n._v("173")]),a("br"),a("span",{staticClass:"line-number"},[n._v("174")]),a("br"),a("span",{staticClass:"line-number"},[n._v("175")]),a("br"),a("span",{staticClass:"line-number"},[n._v("176")]),a("br"),a("span",{staticClass:"line-number"},[n._v("177")]),a("br"),a("span",{staticClass:"line-number"},[n._v("178")]),a("br"),a("span",{staticClass:"line-number"},[n._v("179")]),a("br"),a("span",{staticClass:"line-number"},[n._v("180")]),a("br"),a("span",{staticClass:"line-number"},[n._v("181")]),a("br"),a("span",{staticClass:"line-number"},[n._v("182")]),a("br"),a("span",{staticClass:"line-number"},[n._v("183")]),a("br"),a("span",{staticClass:"line-number"},[n._v("184")]),a("br"),a("span",{staticClass:"line-number"},[n._v("185")]),a("br"),a("span",{staticClass:"line-number"},[n._v("186")]),a("br"),a("span",{staticClass:"line-number"},[n._v("187")]),a("br"),a("span",{staticClass:"line-number"},[n._v("188")]),a("br"),a("span",{staticClass:"line-number"},[n._v("189")]),a("br"),a("span",{staticClass:"line-number"},[n._v("190")]),a("br"),a("span",{staticClass:"line-number"},[n._v("191")]),a("br"),a("span",{staticClass:"line-number"},[n._v("192")]),a("br"),a("span",{staticClass:"line-number"},[n._v("193")]),a("br"),a("span",{staticClass:"line-number"},[n._v("194")]),a("br"),a("span",{staticClass:"line-number"},[n._v("195")]),a("br"),a("span",{staticClass:"line-number"},[n._v("196")]),a("br"),a("span",{staticClass:"line-number"},[n._v("197")]),a("br"),a("span",{staticClass:"line-number"},[n._v("198")]),a("br"),a("span",{staticClass:"line-number"},[n._v("199")]),a("br"),a("span",{staticClass:"line-number"},[n._v("200")]),a("br"),a("span",{staticClass:"line-number"},[n._v("201")]),a("br"),a("span",{staticClass:"line-number"},[n._v("202")]),a("br"),a("span",{staticClass:"line-number"},[n._v("203")]),a("br"),a("span",{staticClass:"line-number"},[n._v("204")]),a("br"),a("span",{staticClass:"line-number"},[n._v("205")]),a("br"),a("span",{staticClass:"line-number"},[n._v("206")]),a("br"),a("span",{staticClass:"line-number"},[n._v("207")]),a("br"),a("span",{staticClass:"line-number"},[n._v("208")]),a("br"),a("span",{staticClass:"line-number"},[n._v("209")]),a("br"),a("span",{staticClass:"line-number"},[n._v("210")]),a("br"),a("span",{staticClass:"line-number"},[n._v("211")]),a("br"),a("span",{staticClass:"line-number"},[n._v("212")]),a("br"),a("span",{staticClass:"line-number"},[n._v("213")]),a("br"),a("span",{staticClass:"line-number"},[n._v("214")]),a("br"),a("span",{staticClass:"line-number"},[n._v("215")]),a("br"),a("span",{staticClass:"line-number"},[n._v("216")]),a("br"),a("span",{staticClass:"line-number"},[n._v("217")]),a("br"),a("span",{staticClass:"line-number"},[n._v("218")]),a("br"),a("span",{staticClass:"line-number"},[n._v("219")]),a("br"),a("span",{staticClass:"line-number"},[n._v("220")]),a("br"),a("span",{staticClass:"line-number"},[n._v("221")]),a("br"),a("span",{staticClass:"line-number"},[n._v("222")]),a("br"),a("span",{staticClass:"line-number"},[n._v("223")]),a("br"),a("span",{staticClass:"line-number"},[n._v("224")]),a("br"),a("span",{staticClass:"line-number"},[n._v("225")]),a("br"),a("span",{staticClass:"line-number"},[n._v("226")]),a("br"),a("span",{staticClass:"line-number"},[n._v("227")]),a("br"),a("span",{staticClass:"line-number"},[n._v("228")]),a("br"),a("span",{staticClass:"line-number"},[n._v("229")]),a("br"),a("span",{staticClass:"line-number"},[n._v("230")]),a("br"),a("span",{staticClass:"line-number"},[n._v("231")]),a("br"),a("span",{staticClass:"line-number"},[n._v("232")]),a("br"),a("span",{staticClass:"line-number"},[n._v("233")]),a("br"),a("span",{staticClass:"line-number"},[n._v("234")]),a("br"),a("span",{staticClass:"line-number"},[n._v("235")]),a("br"),a("span",{staticClass:"line-number"},[n._v("236")]),a("br"),a("span",{staticClass:"line-number"},[n._v("237")]),a("br"),a("span",{staticClass:"line-number"},[n._v("238")]),a("br"),a("span",{staticClass:"line-number"},[n._v("239")]),a("br"),a("span",{staticClass:"line-number"},[n._v("240")]),a("br"),a("span",{staticClass:"line-number"},[n._v("241")]),a("br"),a("span",{staticClass:"line-number"},[n._v("242")]),a("br"),a("span",{staticClass:"line-number"},[n._v("243")]),a("br"),a("span",{staticClass:"line-number"},[n._v("244")]),a("br"),a("span",{staticClass:"line-number"},[n._v("245")]),a("br"),a("span",{staticClass:"line-number"},[n._v("246")]),a("br"),a("span",{staticClass:"line-number"},[n._v("247")]),a("br"),a("span",{staticClass:"line-number"},[n._v("248")]),a("br"),a("span",{staticClass:"line-number"},[n._v("249")]),a("br"),a("span",{staticClass:"line-number"},[n._v("250")]),a("br"),a("span",{staticClass:"line-number"},[n._v("251")]),a("br"),a("span",{staticClass:"line-number"},[n._v("252")]),a("br"),a("span",{staticClass:"line-number"},[n._v("253")]),a("br"),a("span",{staticClass:"line-number"},[n._v("254")]),a("br"),a("span",{staticClass:"line-number"},[n._v("255")]),a("br"),a("span",{staticClass:"line-number"},[n._v("256")]),a("br"),a("span",{staticClass:"line-number"},[n._v("257")]),a("br"),a("span",{staticClass:"line-number"},[n._v("258")]),a("br"),a("span",{staticClass:"line-number"},[n._v("259")]),a("br"),a("span",{staticClass:"line-number"},[n._v("260")]),a("br"),a("span",{staticClass:"line-number"},[n._v("261")]),a("br"),a("span",{staticClass:"line-number"},[n._v("262")]),a("br"),a("span",{staticClass:"line-number"},[n._v("263")]),a("br"),a("span",{staticClass:"line-number"},[n._v("264")]),a("br"),a("span",{staticClass:"line-number"},[n._v("265")]),a("br"),a("span",{staticClass:"line-number"},[n._v("266")]),a("br"),a("span",{staticClass:"line-number"},[n._v("267")]),a("br"),a("span",{staticClass:"line-number"},[n._v("268")]),a("br"),a("span",{staticClass:"line-number"},[n._v("269")]),a("br"),a("span",{staticClass:"line-number"},[n._v("270")]),a("br"),a("span",{staticClass:"line-number"},[n._v("271")]),a("br"),a("span",{staticClass:"line-number"},[n._v("272")]),a("br"),a("span",{staticClass:"line-number"},[n._v("273")]),a("br"),a("span",{staticClass:"line-number"},[n._v("274")]),a("br"),a("span",{staticClass:"line-number"},[n._v("275")]),a("br"),a("span",{staticClass:"line-number"},[n._v("276")]),a("br"),a("span",{staticClass:"line-number"},[n._v("277")]),a("br"),a("span",{staticClass:"line-number"},[n._v("278")]),a("br"),a("span",{staticClass:"line-number"},[n._v("279")]),a("br"),a("span",{staticClass:"line-number"},[n._v("280")]),a("br"),a("span",{staticClass:"line-number"},[n._v("281")]),a("br"),a("span",{staticClass:"line-number"},[n._v("282")]),a("br"),a("span",{staticClass:"line-number"},[n._v("283")]),a("br"),a("span",{staticClass:"line-number"},[n._v("284")]),a("br"),a("span",{staticClass:"line-number"},[n._v("285")]),a("br"),a("span",{staticClass:"line-number"},[n._v("286")]),a("br"),a("span",{staticClass:"line-number"},[n._v("287")]),a("br"),a("span",{staticClass:"line-number"},[n._v("288")]),a("br"),a("span",{staticClass:"line-number"},[n._v("289")]),a("br"),a("span",{staticClass:"line-number"},[n._v("290")]),a("br"),a("span",{staticClass:"line-number"},[n._v("291")]),a("br"),a("span",{staticClass:"line-number"},[n._v("292")]),a("br"),a("span",{staticClass:"line-number"},[n._v("293")]),a("br"),a("span",{staticClass:"line-number"},[n._v("294")]),a("br"),a("span",{staticClass:"line-number"},[n._v("295")]),a("br"),a("span",{staticClass:"line-number"},[n._v("296")]),a("br"),a("span",{staticClass:"line-number"},[n._v("297")]),a("br"),a("span",{staticClass:"line-number"},[n._v("298")]),a("br"),a("span",{staticClass:"line-number"},[n._v("299")]),a("br"),a("span",{staticClass:"line-number"},[n._v("300")]),a("br"),a("span",{staticClass:"line-number"},[n._v("301")]),a("br"),a("span",{staticClass:"line-number"},[n._v("302")]),a("br"),a("span",{staticClass:"line-number"},[n._v("303")]),a("br"),a("span",{staticClass:"line-number"},[n._v("304")]),a("br"),a("span",{staticClass:"line-number"},[n._v("305")]),a("br"),a("span",{staticClass:"line-number"},[n._v("306")]),a("br"),a("span",{staticClass:"line-number"},[n._v("307")]),a("br"),a("span",{staticClass:"line-number"},[n._v("308")]),a("br"),a("span",{staticClass:"line-number"},[n._v("309")]),a("br"),a("span",{staticClass:"line-number"},[n._v("310")]),a("br"),a("span",{staticClass:"line-number"},[n._v("311")]),a("br"),a("span",{staticClass:"line-number"},[n._v("312")]),a("br"),a("span",{staticClass:"line-number"},[n._v("313")]),a("br"),a("span",{staticClass:"line-number"},[n._v("314")]),a("br"),a("span",{staticClass:"line-number"},[n._v("315")]),a("br"),a("span",{staticClass:"line-number"},[n._v("316")]),a("br"),a("span",{staticClass:"line-number"},[n._v("317")]),a("br"),a("span",{staticClass:"line-number"},[n._v("318")]),a("br"),a("span",{staticClass:"line-number"},[n._v("319")]),a("br"),a("span",{staticClass:"line-number"},[n._v("320")]),a("br"),a("span",{staticClass:"line-number"},[n._v("321")]),a("br"),a("span",{staticClass:"line-number"},[n._v("322")]),a("br"),a("span",{staticClass:"line-number"},[n._v("323")]),a("br"),a("span",{staticClass:"line-number"},[n._v("324")]),a("br"),a("span",{staticClass:"line-number"},[n._v("325")]),a("br"),a("span",{staticClass:"line-number"},[n._v("326")]),a("br"),a("span",{staticClass:"line-number"},[n._v("327")]),a("br"),a("span",{staticClass:"line-number"},[n._v("328")]),a("br"),a("span",{staticClass:"line-number"},[n._v("329")]),a("br"),a("span",{staticClass:"line-number"},[n._v("330")]),a("br"),a("span",{staticClass:"line-number"},[n._v("331")]),a("br"),a("span",{staticClass:"line-number"},[n._v("332")]),a("br"),a("span",{staticClass:"line-number"},[n._v("333")]),a("br"),a("span",{staticClass:"line-number"},[n._v("334")]),a("br"),a("span",{staticClass:"line-number"},[n._v("335")]),a("br"),a("span",{staticClass:"line-number"},[n._v("336")]),a("br"),a("span",{staticClass:"line-number"},[n._v("337")]),a("br"),a("span",{staticClass:"line-number"},[n._v("338")]),a("br"),a("span",{staticClass:"line-number"},[n._v("339")]),a("br"),a("span",{staticClass:"line-number"},[n._v("340")]),a("br"),a("span",{staticClass:"line-number"},[n._v("341")]),a("br"),a("span",{staticClass:"line-number"},[n._v("342")]),a("br"),a("span",{staticClass:"line-number"},[n._v("343")]),a("br"),a("span",{staticClass:"line-number"},[n._v("344")]),a("br"),a("span",{staticClass:"line-number"},[n._v("345")]),a("br"),a("span",{staticClass:"line-number"},[n._v("346")]),a("br"),a("span",{staticClass:"line-number"},[n._v("347")]),a("br"),a("span",{staticClass:"line-number"},[n._v("348")]),a("br"),a("span",{staticClass:"line-number"},[n._v("349")]),a("br"),a("span",{staticClass:"line-number"},[n._v("350")]),a("br"),a("span",{staticClass:"line-number"},[n._v("351")]),a("br"),a("span",{staticClass:"line-number"},[n._v("352")]),a("br"),a("span",{staticClass:"line-number"},[n._v("353")]),a("br"),a("span",{staticClass:"line-number"},[n._v("354")]),a("br"),a("span",{staticClass:"line-number"},[n._v("355")]),a("br"),a("span",{staticClass:"line-number"},[n._v("356")]),a("br"),a("span",{staticClass:"line-number"},[n._v("357")]),a("br"),a("span",{staticClass:"line-number"},[n._v("358")]),a("br"),a("span",{staticClass:"line-number"},[n._v("359")]),a("br"),a("span",{staticClass:"line-number"},[n._v("360")]),a("br"),a("span",{staticClass:"line-number"},[n._v("361")]),a("br"),a("span",{staticClass:"line-number"},[n._v("362")]),a("br"),a("span",{staticClass:"line-number"},[n._v("363")]),a("br"),a("span",{staticClass:"line-number"},[n._v("364")]),a("br"),a("span",{staticClass:"line-number"},[n._v("365")]),a("br"),a("span",{staticClass:"line-number"},[n._v("366")]),a("br"),a("span",{staticClass:"line-number"},[n._v("367")]),a("br"),a("span",{staticClass:"line-number"},[n._v("368")]),a("br"),a("span",{staticClass:"line-number"},[n._v("369")]),a("br"),a("span",{staticClass:"line-number"},[n._v("370")]),a("br"),a("span",{staticClass:"line-number"},[n._v("371")]),a("br"),a("span",{staticClass:"line-number"},[n._v("372")]),a("br"),a("span",{staticClass:"line-number"},[n._v("373")]),a("br"),a("span",{staticClass:"line-number"},[n._v("374")]),a("br"),a("span",{staticClass:"line-number"},[n._v("375")]),a("br"),a("span",{staticClass:"line-number"},[n._v("376")]),a("br"),a("span",{staticClass:"line-number"},[n._v("377")]),a("br"),a("span",{staticClass:"line-number"},[n._v("378")]),a("br"),a("span",{staticClass:"line-number"},[n._v("379")]),a("br"),a("span",{staticClass:"line-number"},[n._v("380")]),a("br"),a("span",{staticClass:"line-number"},[n._v("381")]),a("br"),a("span",{staticClass:"line-number"},[n._v("382")]),a("br"),a("span",{staticClass:"line-number"},[n._v("383")]),a("br"),a("span",{staticClass:"line-number"},[n._v("384")]),a("br"),a("span",{staticClass:"line-number"},[n._v("385")]),a("br"),a("span",{staticClass:"line-number"},[n._v("386")]),a("br"),a("span",{staticClass:"line-number"},[n._v("387")]),a("br"),a("span",{staticClass:"line-number"},[n._v("388")]),a("br"),a("span",{staticClass:"line-number"},[n._v("389")]),a("br"),a("span",{staticClass:"line-number"},[n._v("390")]),a("br"),a("span",{staticClass:"line-number"},[n._v("391")]),a("br"),a("span",{staticClass:"line-number"},[n._v("392")]),a("br"),a("span",{staticClass:"line-number"},[n._v("393")]),a("br"),a("span",{staticClass:"line-number"},[n._v("394")]),a("br"),a("span",{staticClass:"line-number"},[n._v("395")]),a("br"),a("span",{staticClass:"line-number"},[n._v("396")]),a("br"),a("span",{staticClass:"line-number"},[n._v("397")]),a("br"),a("span",{staticClass:"line-number"},[n._v("398")]),a("br"),a("span",{staticClass:"line-number"},[n._v("399")]),a("br"),a("span",{staticClass:"line-number"},[n._v("400")]),a("br"),a("span",{staticClass:"line-number"},[n._v("401")]),a("br"),a("span",{staticClass:"line-number"},[n._v("402")]),a("br"),a("span",{staticClass:"line-number"},[n._v("403")]),a("br"),a("span",{staticClass:"line-number"},[n._v("404")]),a("br"),a("span",{staticClass:"line-number"},[n._v("405")]),a("br"),a("span",{staticClass:"line-number"},[n._v("406")]),a("br"),a("span",{staticClass:"line-number"},[n._v("407")]),a("br"),a("span",{staticClass:"line-number"},[n._v("408")]),a("br"),a("span",{staticClass:"line-number"},[n._v("409")]),a("br"),a("span",{staticClass:"line-number"},[n._v("410")]),a("br"),a("span",{staticClass:"line-number"},[n._v("411")]),a("br"),a("span",{staticClass:"line-number"},[n._v("412")]),a("br"),a("span",{staticClass:"line-number"},[n._v("413")]),a("br"),a("span",{staticClass:"line-number"},[n._v("414")]),a("br"),a("span",{staticClass:"line-number"},[n._v("415")]),a("br"),a("span",{staticClass:"line-number"},[n._v("416")]),a("br"),a("span",{staticClass:"line-number"},[n._v("417")]),a("br"),a("span",{staticClass:"line-number"},[n._v("418")]),a("br"),a("span",{staticClass:"line-number"},[n._v("419")]),a("br"),a("span",{staticClass:"line-number"},[n._v("420")]),a("br"),a("span",{staticClass:"line-number"},[n._v("421")]),a("br"),a("span",{staticClass:"line-number"},[n._v("422")]),a("br"),a("span",{staticClass:"line-number"},[n._v("423")]),a("br"),a("span",{staticClass:"line-number"},[n._v("424")]),a("br"),a("span",{staticClass:"line-number"},[n._v("425")]),a("br"),a("span",{staticClass:"line-number"},[n._v("426")]),a("br"),a("span",{staticClass:"line-number"},[n._v("427")]),a("br"),a("span",{staticClass:"line-number"},[n._v("428")]),a("br"),a("span",{staticClass:"line-number"},[n._v("429")]),a("br"),a("span",{staticClass:"line-number"},[n._v("430")]),a("br"),a("span",{staticClass:"line-number"},[n._v("431")]),a("br"),a("span",{staticClass:"line-number"},[n._v("432")]),a("br"),a("span",{staticClass:"line-number"},[n._v("433")]),a("br"),a("span",{staticClass:"line-number"},[n._v("434")]),a("br"),a("span",{staticClass:"line-number"},[n._v("435")]),a("br"),a("span",{staticClass:"line-number"},[n._v("436")]),a("br"),a("span",{staticClass:"line-number"},[n._v("437")]),a("br"),a("span",{staticClass:"line-number"},[n._v("438")]),a("br"),a("span",{staticClass:"line-number"},[n._v("439")]),a("br"),a("span",{staticClass:"line-number"},[n._v("440")]),a("br"),a("span",{staticClass:"line-number"},[n._v("441")]),a("br"),a("span",{staticClass:"line-number"},[n._v("442")]),a("br"),a("span",{staticClass:"line-number"},[n._v("443")]),a("br"),a("span",{staticClass:"line-number"},[n._v("444")]),a("br"),a("span",{staticClass:"line-number"},[n._v("445")]),a("br"),a("span",{staticClass:"line-number"},[n._v("446")]),a("br"),a("span",{staticClass:"line-number"},[n._v("447")]),a("br"),a("span",{staticClass:"line-number"},[n._v("448")]),a("br"),a("span",{staticClass:"line-number"},[n._v("449")]),a("br"),a("span",{staticClass:"line-number"},[n._v("450")]),a("br"),a("span",{staticClass:"line-number"},[n._v("451")]),a("br"),a("span",{staticClass:"line-number"},[n._v("452")]),a("br"),a("span",{staticClass:"line-number"},[n._v("453")]),a("br"),a("span",{staticClass:"line-number"},[n._v("454")]),a("br"),a("span",{staticClass:"line-number"},[n._v("455")]),a("br"),a("span",{staticClass:"line-number"},[n._v("456")]),a("br"),a("span",{staticClass:"line-number"},[n._v("457")]),a("br"),a("span",{staticClass:"line-number"},[n._v("458")]),a("br"),a("span",{staticClass:"line-number"},[n._v("459")]),a("br"),a("span",{staticClass:"line-number"},[n._v("460")]),a("br"),a("span",{staticClass:"line-number"},[n._v("461")]),a("br"),a("span",{staticClass:"line-number"},[n._v("462")]),a("br"),a("span",{staticClass:"line-number"},[n._v("463")]),a("br"),a("span",{staticClass:"line-number"},[n._v("464")]),a("br"),a("span",{staticClass:"line-number"},[n._v("465")]),a("br"),a("span",{staticClass:"line-number"},[n._v("466")]),a("br"),a("span",{staticClass:"line-number"},[n._v("467")]),a("br"),a("span",{staticClass:"line-number"},[n._v("468")]),a("br"),a("span",{staticClass:"line-number"},[n._v("469")]),a("br"),a("span",{staticClass:"line-number"},[n._v("470")]),a("br"),a("span",{staticClass:"line-number"},[n._v("471")]),a("br"),a("span",{staticClass:"line-number"},[n._v("472")]),a("br"),a("span",{staticClass:"line-number"},[n._v("473")]),a("br"),a("span",{staticClass:"line-number"},[n._v("474")]),a("br"),a("span",{staticClass:"line-number"},[n._v("475")]),a("br"),a("span",{staticClass:"line-number"},[n._v("476")]),a("br"),a("span",{staticClass:"line-number"},[n._v("477")]),a("br"),a("span",{staticClass:"line-number"},[n._v("478")]),a("br"),a("span",{staticClass:"line-number"},[n._v("479")]),a("br"),a("span",{staticClass:"line-number"},[n._v("480")]),a("br"),a("span",{staticClass:"line-number"},[n._v("481")]),a("br"),a("span",{staticClass:"line-number"},[n._v("482")]),a("br"),a("span",{staticClass:"line-number"},[n._v("483")]),a("br"),a("span",{staticClass:"line-number"},[n._v("484")]),a("br"),a("span",{staticClass:"line-number"},[n._v("485")]),a("br"),a("span",{staticClass:"line-number"},[n._v("486")]),a("br"),a("span",{staticClass:"line-number"},[n._v("487")]),a("br"),a("span",{staticClass:"line-number"},[n._v("488")]),a("br"),a("span",{staticClass:"line-number"},[n._v("489")]),a("br"),a("span",{staticClass:"line-number"},[n._v("490")]),a("br"),a("span",{staticClass:"line-number"},[n._v("491")]),a("br"),a("span",{staticClass:"line-number"},[n._v("492")]),a("br"),a("span",{staticClass:"line-number"},[n._v("493")]),a("br"),a("span",{staticClass:"line-number"},[n._v("494")]),a("br"),a("span",{staticClass:"line-number"},[n._v("495")]),a("br"),a("span",{staticClass:"line-number"},[n._v("496")]),a("br"),a("span",{staticClass:"line-number"},[n._v("497")]),a("br"),a("span",{staticClass:"line-number"},[n._v("498")]),a("br"),a("span",{staticClass:"line-number"},[n._v("499")]),a("br"),a("span",{staticClass:"line-number"},[n._v("500")]),a("br"),a("span",{staticClass:"line-number"},[n._v("501")]),a("br")])]),a("h3",{attrs:{id:"arraylist源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist源码分析"}},[n._v("#")]),n._v(" "),a("font",{attrs:{face:"楷体",id:"1",id:"5"}},[n._v("ArrayList源码分析")])],1),n._v(" "),a("h4",{attrs:{id:"system-arraycopy-和arrays-copyof-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-arraycopy-和arrays-copyof-方法"}},[n._v("#")]),n._v(" System.arraycopy()和Arrays.copyOf()方法")]),n._v(" "),a("p",[n._v("通过上面源码我们发现这两个实现数组复制的方法被广泛使用而且很多地方都特别巧妙。比如下面"),a("font",{attrs:{color:"red"}},[n._v("add(int index, E element)")]),n._v("方法就很巧妙的用到了"),a("font",{attrs:{color:"red"}},[n._v("arraycopy()方法")]),n._v("让数组自己复制自己实现让index开始之后的所有成员后移一个位置:")],1),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    /**\n     * 在此列表中的指定位置插入指定的元素。 \n     *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；\n     *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        //arraycopy()方法实现数组自己复制自己\n        //elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量；\n        System.arraycopy(elementData, index, elementData, index + 1, size - index);\n        elementData[index] = element;\n        size++;\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("又如toArray()方法中用到了copyOf()方法")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n    /**\n     *以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。 \n     *返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。\n     *因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。\n     */\n    public Object[] toArray() {\n    //elementData：要复制的数组；size：要复制的长度\n        return Arrays.copyOf(elementData, size);\n    }\n    \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("h5",{attrs:{id:"两者联系与区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两者联系与区别"}},[n._v("#")]),n._v(" 两者联系与区别")]),n._v(" "),a("p",[a("strong",[n._v("联系：")]),n._v("\n看两者源代码可以发现"),a("code",[n._v("copyOf()")]),n._v("内部调用了"),a("code",[n._v("System.arraycopy()")]),n._v("方法\n"),a("strong",[n._v("区别：")])]),n._v(" "),a("ol",[a("li",[n._v("arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置")]),n._v(" "),a("li",[n._v("copyOf()是系统自动在内部新建一个数组，并返回该数组。")])]),n._v(" "),a("h4",{attrs:{id:"arraylist-核心扩容技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-核心扩容技术"}},[n._v("#")]),n._v(" ArrayList 核心扩容技术")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("        //下面是ArrayList的扩容机制\n        //ArrayList的扩容机制提高了性能，如果每次只扩充一个，\n        //那么频繁的插入会导致频繁的拷贝，降低性能，而ArrayList的扩容机制避免了这种情况。\n    /**\n     * 如有必要，增加此ArrayList实例的容量，以确保它至少能容纳元素的数量\n     * @param   minCapacity   所需的最小容量\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n            // any size if not default element table\n            ? 0\n            // larger than default for default empty table. It's already\n            // supposed to be at default size.\n            : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n   //得到最小扩容量\n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n              // 获取默认的容量和传入参数的较大值\n            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n\n        ensureExplicitCapacity(minCapacity);\n    }\n  //判断是否需要扩容,上面两个方法都要调用\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // 如果说minCapacity也就是所需的最小容量大于保存ArrayList数据的数组的长度的话，就需要调用grow(minCapacity)方法扩容。\n        //这个minCapacity到底为多少呢？举个例子在添加元素(add)方法中这个minCapacity的大小就为现在数组的长度加1\n        if (minCapacity - elementData.length > 0)\n            //调用grow方法进行扩容，调用此方法代表已经开始扩容了\n            grow(minCapacity);\n    }\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    /**\n     * ArrayList扩容的核心方法。\n     */\n    private void grow(int minCapacity) {\n       //elementData为保存ArrayList数据的数组\n       ///elementData.length求数组长度elementData.size是求数组中的元素个数\n        // oldCapacity为旧容量，newCapacity为新容量\n        int oldCapacity = elementData.length;\n        //将oldCapacity 右移一位，其效果相当于oldCapacity /2，\n        //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        //再检查新容量是否超出了ArrayList所定义的最大容量，\n        //若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，\n        //如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n    \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("p",[n._v("扩容机制代码已经做了详细的解释。另外值得注意的是大家很容易忽略的一个运算符："),a("strong",[n._v("移位运算符")]),n._v(" "),a("strong",[n._v("简介")]),n._v("：移位运算符就是在二进制的基础上对数字进行平移。按照平移的方向和填充数字的规则分为三种:"),a("font",{attrs:{color:"red"}},[n._v("<<(左移)")]),n._v("、"),a("font",{attrs:{color:"red"}},[n._v(">>(带符号右移)")]),n._v("和"),a("font",{attrs:{color:"red"}},[n._v(">>>(无符号右移)")]),n._v("。\n　　"),a("strong",[n._v("作用")]),n._v("："),a("strong",[n._v("对于大数据的2进制运算,位移运算符比那些普通运算符的运算要快很多,因为程序仅仅移动一下而已,不去计算,这样提高了效率,节省了资源")]),n._v("\n　　比如这里：int newCapacity = oldCapacity + (oldCapacity >> 1);\n右移一位相当于除2，右移n位相当于除以 2 的 n 次方。这里 oldCapacity 明显右移了1位所以相当于oldCapacity /2。")],1),n._v(" "),a("p",[a("strong",[n._v("另外需要注意的是：")])]),n._v(" "),a("ol",[a("li",[a("p",[n._v("java 中的"),a("strong",[n._v("length 属性")]),n._v("是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了 length 这个属性.")])]),n._v(" "),a("li",[a("p",[n._v("java 中的"),a("strong",[n._v("length()方法")]),n._v("是针对字  符串String说的,如果想看这个字符串的长度则用到 length()这个方法.")])]),n._v(" "),a("li",[a("p",[n._v(".java 中的"),a("strong",[n._v("size()方法")]),n._v("是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!")])])]),n._v(" "),a("h4",{attrs:{id:"内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部类"}},[n._v("#")]),n._v(" 内部类")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    (1)private class Itr implements Iterator<E>  \n    (2)private class ListItr extends Itr implements ListIterator<E>  \n    (3)private class SubList extends AbstractList<E> implements RandomAccess  \n    (4)static final class ArrayListSpliterator<E> implements Spliterator<E>  \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("ArrayList有四个内部类，其中的"),a("strong",[n._v("Itr是实现了Iterator接口")]),n._v("，同时重写了里面的"),a("strong",[n._v("hasNext()")]),n._v("，"),a("strong",[n._v("next()")]),n._v("，"),a("strong",[n._v("remove()"),a("strong",[n._v("等方法；其中的")]),n._v("ListItr")]),n._v("继承"),a("strong",[n._v("Itr")]),n._v("，实现了"),a("strong",[n._v("ListIterator接口")]),n._v("，同时重写了"),a("strong",[n._v("hasPrevious()")]),n._v("，"),a("strong",[n._v("nextIndex()")]),n._v("，"),a("strong",[n._v("previousIndex()")]),n._v("，"),a("strong",[n._v("previous()")]),n._v("，"),a("strong",[n._v("set(E e)")]),n._v("，**add(E e)**等方法，所以这也可以看出了 **Iterator和ListIterator的区别:**ListIterator在Iterator的基础上增加了添加对象，修改对象，逆向遍历等方法，这些是Iterator不能实现的。")]),n._v(" "),a("h3",{attrs:{id:"arraylist经典demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist经典demo"}},[n._v("#")]),n._v(" "),a("font",{attrs:{face:"楷体",id:"6"}},[n._v(" ArrayList经典Demo")])],1),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package list;\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class ArrayListDemo {\n\n    public static void main(String[] srgs){\n         ArrayList<Integer> arrayList = new ArrayList<Integer>();\n\n         System.out.printf("Before add:arrayList.size() = %d\\n",arrayList.size());\n\n         arrayList.add(1);\n         arrayList.add(3);\n         arrayList.add(5);\n         arrayList.add(7);\n         arrayList.add(9);\n         System.out.printf("After add:arrayList.size() = %d\\n",arrayList.size());\n\n         System.out.println("Printing elements of arrayList");\n         // 三种遍历方式打印元素\n         // 第一种：通过迭代器遍历\n         System.out.print("通过迭代器遍历:");\n         Iterator<Integer> it = arrayList.iterator();\n         while(it.hasNext()){\n             System.out.print(it.next() + " ");\n         }\n         System.out.println();\n\n         // 第二种：通过索引值遍历\n         System.out.print("通过索引值遍历:");\n         for(int i = 0; i < arrayList.size(); i++){\n             System.out.print(arrayList.get(i) + " ");\n         }\n         System.out.println();\n\n         // 第三种：for循环遍历\n         System.out.print("for循环遍历:");\n         for(Integer number : arrayList){\n             System.out.print(number + " ");\n         }\n\n         // toArray用法\n         // 第一种方式(最常用)\n         Integer[] integer = arrayList.toArray(new Integer[0]);\n\n         // 第二种方式(容易理解)\n         Integer[] integer1 = new Integer[arrayList.size()];\n         arrayList.toArray(integer1);\n\n         // 抛出异常，java不支持向下转型\n         //Integer[] integer2 = new Integer[arrayList.size()];\n         //integer2 = arrayList.toArray();\n         System.out.println();\n\n         // 在指定位置添加元素\n         arrayList.add(2,2);\n         // 删除指定位置上的元素\n         arrayList.remove(2);    \n         // 删除指定元素\n         arrayList.remove((Object)3);\n         // 判断arrayList是否包含5\n         System.out.println("ArrayList contains 5 is: " + arrayList.contains(5));\n\n         // 清空ArrayList\n         arrayList.clear();\n         // 判断ArrayList是否为空\n         System.out.println("ArrayList is empty: " + arrayList.isEmpty());\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);