(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{6156:function(t,a,s){t.exports=s.p+"assets/img/image-20220331001634019.c7c983a2.png"},6157:function(t,a,s){t.exports=s.p+"assets/img/image-20220331002256087.488777a9.png"},6158:function(t,a,s){t.exports=s.p+"assets/img/image-20220331003921413.d4c33563.png"},6159:function(t,a,s){t.exports=s.p+"assets/img/image-20220331004931120.1ff76d18.png"},6160:function(t,a,s){t.exports=s.p+"assets/img/image-20220331005107240.043d426d.png"},6161:function(t,a,s){t.exports=s.p+"assets/img/image-20220331005623877.6c3e63bd.png"},6162:function(t,a,s){t.exports=s.p+"assets/img/image-20220331010316710.08c6884b.png"},6163:function(t,a,s){t.exports=s.p+"assets/img/image-20220331010626209.f52638cf.png"},6164:function(t,a,s){t.exports=s.p+"assets/img/image-20220331011112819.433a603c.png"},6165:function(t,a,s){t.exports=s.p+"assets/img/image-20220331011144128.3126c7c7.png"},6166:function(t,a,s){t.exports=s.p+"assets/img/image-20220331011752360.8afe147e.png"},6167:function(t,a,s){t.exports=s.p+"assets/img/image-20220331011908382.bc8fa893.png"},6168:function(t,a,s){t.exports=s.p+"assets/img/image-20220331011958393.c24d2e0c.png"},6169:function(t,a,s){t.exports=s.p+"assets/img/image-20220331012119439.56267f16.png"},6170:function(t,a,s){t.exports=s.p+"assets/img/image-20220331012132126.b068e744.png"},9456:function(t,a,s){"use strict";s.r(a);var e=s(5),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_4-类和对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-类和对象"}},[t._v("#")]),t._v(" 4.类和对象")]),t._v(" "),e("p",[t._v("​\t\t我们从类和对象的角度来开始这部分，类和对象这俩个词经常被使用和互换，但他们根本不同， 类是用于创建对象的蓝图或者是模板")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6156),alt:"image-20220331001634019"}})]),t._v(" "),e("p",[t._v("​\t例如：一个叫做car的类，在这个类我们可以定义我们需要知道一切关于car的内容")]),t._v(" "),e("p",[t._v("​\t\t所以一辆车有一些属性，比如他是否启动，他的当前速度，他的当前档位等等，编程时，我们使用类似于变量的字段来实现这些属性，在类中定义。")]),t._v(" "),e("p",[t._v("​\t\tcar也可以有一些方法，如，启动，停止，制动，换挡等等")]),t._v(" "),e("p",[t._v("​\t\t"),e("img",{attrs:{src:s(6157),alt:"image-20220331002256087"}})]),t._v(" "),e("p",[t._v("​\t例如-当我们调用这些方法的时候，汽车的状态会发生变化，我们调用 换挡方法时，当前档位的字段值会发生变化")]),t._v(" "),e("p",[t._v("​\t所以，这个Car类是一个模板或蓝图，用于创建新的对象，对象是类的实例，因此基于通过这个模板，我们可以创建许多实例，比如car1，car2。。。所有这些car对象将具有相同的字段和方法，但他们彼此独立，每个汽车物体都将位于一个内存中有单独的空间，他可以处于单独的 状态，比如每个车的档位和当前速度可能不同，因此每个汽车对象的数据可能会不同。")]),t._v(" "),e("p",[t._v("我们用UML来表示一下这些对象，UML--是统一建模语言的缩写（unfied modeling language）,这是一种简单的视觉语言，我们用来在可视化关系")]),t._v(" "),e("h4",{attrs:{id:"create-class-创建类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-class-创建类"}},[t._v("#")]),t._v(" create Class 创建类")]),t._v(" "),e("p",[t._v("​\t现在我们创建一个类，我们在设置text方法的时候 text = text是不可以的，所以我们需要使用this关键字，this是使用当前对象的引用，这个this运算符可以查看此对象的成员，我们找到了这个text文本字段中，这个成员上的图标是f，代表field字段，我们还可以看到一些方法比如clone()等等，我们并没有声明这些方法，他们是如何出现在这里的呢？")]),t._v(" "),e("p",[t._v("​\t\t这是通过一种叫做继承的机制实现的，我们java中声明的类自动继承了另一个类，我们在以后讨论这个点")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6158),alt:"image-20220331003921413"}})]),t._v(" "),e("p",[t._v("我们创建一个清除文本的方法clear")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6159),alt:"image-20220331004931120"}})]),t._v(" "),e("p",[t._v("​\t在clear这里我们其实不需要this这个关键字，因为没有重复的名字")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6160),alt:"image-20220331005107240"}})]),t._v(" "),e("p",[t._v("​\t这是我们的文本框类，有三个成员，1个字段和2个方法")]),t._v(" "),e("p",[t._v("​\t从技术上讲，我们不应该声明为public字段，公开的字段，好的，我们现在只是起步，然后慢慢深入。")]),t._v(" "),e("h4",{attrs:{id:"创建实例对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建实例对象"}},[t._v("#")]),t._v(" 创建实例对象")]),t._v(" "),e("p",[t._v("​\t我们声明一个TextBox的变量，然后new运算符创建实例")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6161),alt:"image-20220331005623877"}})]),t._v(" "),e("p",[t._v("​\t这里我们可以改进一下，这个TextBox重复了俩次，这是一个很好的例子，我们的代码有点脏，我们可以使用var来简化这个过程，var是java的关键字")]),t._v(" "),e("p",[t._v("​\t因此我们可以将第一个TextBox替换为var，Java编译器将检测这个变量的类型，根据右侧的内容")]),t._v(" "),e("p",[t._v("​\t当我们使用var 时，我们可以声明一个变量并给他不同类型的值，他会自动识别类型的")]),t._v(" "),e("p",[t._v("​\t如果我们随便给他赋值编译器会识别类型是否一致，如下不一致会报错")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6162),alt:"image-20220331010316710"}})]),t._v(" "),e("p",[t._v("​\t所以我们使用var关键字，可以使代码更干净，我们将让java编译器确定")]),t._v(" "),e("p",[t._v("我们运行下面这段代码，结果是null，为什么是null呢？")]),t._v(" "),e("p",[t._v("​\t这就关于我们之前学习的 基本类型和引用类型了，基本类型是数字，布尔，字符，其他的都是引用类型，text字段是String 类型，如果我们不初始化这些引用类型，他们将设置为null")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6163),alt:"image-20220331010626209"}})]),t._v(" "),e("p",[t._v("如果我们认为不是null，还调用了大小写转换的方法，就会发生报错了")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6164),alt:"image-20220331011112819"}})]),t._v(" "),e("p",[t._v("发生了空指针异常--他是java中最常见的异常")]),t._v(" "),e("p",[t._v("​\t\t因为这个text为空，所以它没有得到内存中的值，这个是不存在的所以就报空指针了，内存中根本没有这个")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6165),alt:"image-20220331011144128"}})]),t._v(" "),e("p",[t._v("​\t那么我们如何避免这种情况的发生呢？")]),t._v(" "),e("p",[t._v("​\t我们可以给他初始化一个值，这样text永远都不会是null了")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6166),alt:"image-20220331011752360"}})]),t._v(" "),e("p",[t._v("我们再次运行一下main方法调用一下")]),t._v(" "),e("p",[t._v("​\t打印了个空白，没有发生异常")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6167),alt:"image-20220331011908382"}})]),t._v(" "),e("p",[t._v("现在我们设置一个值试一下")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6168),alt:"image-20220331011958393"}})]),t._v(" "),e("p",[t._v("我们添加一个text对象设置不同的值我们看一下")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6169),alt:"image-20220331012119439"}})]),t._v(" "),e("p",[t._v("我们可以看到这些对象完全独立")]),t._v(" "),e("p",[e("img",{attrs:{src:s(6170),alt:"image-20220331012132126"}})])])}),[],!1,null,null,null);a.default=i.exports}}]);