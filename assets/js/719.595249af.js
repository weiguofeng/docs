(window.webpackJsonp=window.webpackJsonp||[]).push([[719],{8270:function(t,r,e){"use strict";e.r(r);var _=e(5),n=Object(_.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Java面试通关手册（Java学习指南，欢迎Star，会一直完善下去，欢迎建议和指导）："),e("a",{attrs:{href:"https://github.com/Snailclimb/Java_Guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/Snailclimb/Java_Guide"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("h2",{attrs:{id:"书籍推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#书籍推荐"}},[t._v("#")]),t._v(" 书籍推荐")])]),t._v(" "),e("p",[e("strong",[t._v("《高性能MySQL : 第3版》")])]),t._v(" "),e("blockquote",[e("h2",{attrs:{id:"文字教程推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文字教程推荐"}},[t._v("#")]),t._v(" 文字教程推荐")])]),t._v(" "),e("p",[e("a",{attrs:{href:"http://www.runoob.com/mysql/mysql-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 教程（菜鸟教程）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.yiibai.com/mysql/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL教程（易百教程）"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("h2",{attrs:{id:"视频教程推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#视频教程推荐"}},[t._v("#")]),t._v(" 视频教程推荐")])]),t._v(" "),e("p",[e("strong",[t._v("基础入门：")]),t._v(" "),e("a",{attrs:{href:"https://www.imooc.com/learn/122",target:"_blank",rel:"noopener noreferrer"}},[t._v("与MySQL的零距离接触-慕课网"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("strong",[t._v("Mysql开发技巧：")]),t._v(" "),e("a",{attrs:{href:"https://www.imooc.com/learn/398",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL开发技巧（一）"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.imooc.com/learn/427",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL开发技巧（二）"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.imooc.com/learn/449",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL开发技巧（三）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("strong",[t._v("Mysql5.7新特性及相关优化技巧：")]),t._v(" "),e("a",{attrs:{href:"https://www.imooc.com/learn/533",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL5.7版本新特性"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.imooc.com/learn/194",target:"_blank",rel:"noopener noreferrer"}},[t._v("性能优化之MySQL优化"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.imooc.com/learn/993",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL集群（PXC）入门"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.imooc.com/learn/951",target:"_blank",rel:"noopener noreferrer"}},[t._v("MyCAT入门及应用"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("h2",{attrs:{id:"常见问题总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见问题总结"}},[t._v("#")]),t._v(" 常见问题总结")])]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"_1存储引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1存储引擎"}},[t._v("#")]),t._v(" ①存储引擎")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5b1685bef265da6e5c3c1c34",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL常见的两种存储引擎：MyISAM与InnoDB的爱恨情仇"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_2字符集及校对规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2字符集及校对规则"}},[t._v("#")]),t._v(" ②字符集及校对规则")]),t._v(" "),e("p",[t._v("字符集指的是一种从二进制编码到某类字符符号的映射。校对规则则是指某种字符集下的排序规则。Mysql中每一种字符集都会对应一系列的校对规则。")]),t._v(" "),e("p",[t._v("Mysql采用的是类似继承的方式指定字符集的默认值，每个数据库以及每张数据表都有自己的默认值，他们逐层继承。比如：某个库中所有表的默认字符集将是该数据库所指定的字符集（这些表在没有指定字符集的情况下，才会采用默认字符集） PS：整理自《Java工程师修炼之道》")]),t._v(" "),e("p",[t._v("详细内容可以参考：   "),e("a",{attrs:{href:"https://www.cnblogs.com/geaozhang/p/6724393.html#mysqlyuzifuji",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL字符集及校对规则的理解"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_3索引相关的内容-数据库使用中非常关键的技术-合理正确的使用索引可以大大提高数据库的查询性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3索引相关的内容-数据库使用中非常关键的技术-合理正确的使用索引可以大大提高数据库的查询性能"}},[t._v("#")]),t._v(" ③索引相关的内容（数据库使用中非常关键的技术，合理正确的使用索引可以大大提高数据库的查询性能）")]),t._v(" "),e("p",[t._v("Mysql索引使用的数据结构主要有"),e("strong",[t._v("BTree索引")]),t._v(" 和 "),e("strong",[t._v("哈希索引")]),t._v(" 。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。")]),t._v(" "),e("p",[t._v("Mysql的BTree索引使用的是B数中的B+Tree，但对于主要的两种存储引擎的实现方式是不同的。")]),t._v(" "),e("p",[e("strong",[t._v("MyISAM:")]),t._v(" B+Tree叶节点的data域存放的是数据记录的地址。在索引检索的时候，首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引”。")]),t._v(" "),e("p",[e("strong",[t._v("InnoDB:")]),t._v(" 其数据文件本身就是索引文件。相比MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按B+Tree组织的一个索引结构，树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。这被称为“聚簇索引（或聚集索引）”。而其余的索引都作为辅助索引，辅助索引的data域存储相应记录主键的值而不是地址，这也是和MyISAM不同的地方。"),e("strong",[t._v("在根据主索引搜索时，直接找到key所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。")]),t._v(" "),e("strong",[t._v("因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。")]),t._v(" PS：整理自《Java工程师修炼之道》")]),t._v(" "),e("p",[t._v("详细内容可以参考：")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/1775b4ff123a",target:"_blank",rel:"noopener noreferrer"}},[t._v("干货：mysql索引的数据结构"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/Jack__Frost/article/details/72571540",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL优化系列（三）--索引的使用、原理和设计优化"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5b55b842f265da0f9e589e79#comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库两大神器【索引和锁】"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_4查询缓存的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4查询缓存的使用"}},[t._v("#")]),t._v(" ④查询缓存的使用")]),t._v(" "),e("p",[t._v("my.cnf加入以下配置，重启Mysql开启查询缓存")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("query_cache_type=1\nquery_cache_size=600000\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("Mysql执行以下命令也可以开启查询缓存")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("set global  query_cache_type=1;\nset global  query_cache_size=600000;\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("如上，"),e("strong",[t._v("开启查询缓存后在同样的查询条件以及数据情况下，会直接在缓存中返回结果")]),t._v("。这里的查询条件包括查询本身、当前要查询的数据库、客户端协议版本号等一些可能影响结果的信息。因此任何两个查询在任何字符上的不同都会导致缓存不命中。此外，如果查询中包含任何用户自定义函数、存储函数、用户变量、临时表、Mysql库中的系统表，其查询结果也不会被缓存。")]),t._v(" "),e("p",[t._v("缓存建立之后，Mysql的查询缓存系统会跟踪查询中涉及的每张表，如果这些表（数据或结构）发生变化，那么和这张表相关的所有缓存数据都将失效。")]),t._v(" "),e("p",[e("strong",[t._v("缓存虽然能够提升数据库的查询性能，但是缓存同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。")]),t._v(" 因此，开启缓存查询要谨慎，尤其对于写密集的应用来说更是如此。如果开启，要注意合理控制缓存空间大小，一般来说其大小设置为几十MB比较合适。此外，"),e("strong",[t._v("还可以通过sql_cache和sql_no_cache来控制某个查询语句是否需要缓存：")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select sql_no_cache count(*) from usr;\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_5事务机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5事务机制"}},[t._v("#")]),t._v(" ⑤事务机制")]),t._v(" "),e("p",[e("strong",[t._v("关系性数据库需要遵循ACID规则，具体内容如下：")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/20/1637b08b98619455?w=312&h=305&f=png&s=22430",alt:"事务的特性"}})]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("原子性：")]),t._v(" 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；")]),t._v(" "),e("li",[e("strong",[t._v("一致性：")]),t._v(" 执行事务前后，数据库从一个一致性状态转换到另一个一致性状态。")]),t._v(" "),e("li",[e("strong",[t._v("隔离性：")]),t._v(" 并发访问数据库时，一个用户的事物不被其他事务所干扰，各并发事务之间数据库是独立的；")]),t._v(" "),e("li",[e("strong",[t._v("持久性：")]),t._v(" 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库 发生故障也不应该对其有任何影响。")])]),t._v(" "),e("p",[e("strong",[t._v("为了达到上述事务特性，数据库定义了几种不同的事务隔离级别：")])]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("READ_UNCOMMITTED（未提交读）:")]),t._v(" 最低的隔离级别，允许读取尚未提交的数据变更，"),e("strong",[t._v("可能会导致脏读、幻读或不可重复读")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("READ_COMMITTED（提交读）:")]),t._v(" \t允许读取并发事务已经提交的数据，"),e("strong",[t._v("可以阻止脏读，但是幻读或不可重复读仍有可能发生")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("REPEATABLE_READ（可重复读）:")]),t._v(" \t对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，"),e("strong",[t._v("可以阻止脏读和不可重复读，但幻读仍有可能发生。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("SERIALIZABLE（串行）:")]),t._v(" \t最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，"),e("strong",[t._v("该级别可以防止脏读、不可重复读以及幻读")]),t._v("。但是这将严重影响程序的性能。通常情况下也不会用到该级别。")]),t._v(" "),e("p",[t._v("这里需要注意的是："),e("strong",[t._v("Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.")])]),t._v(" "),e("p",[t._v("事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是MVCC（多版本并发控制），通过行的创建时间和行的过期时间来支持并发一致性读和回滚等特性。")]),t._v(" "),e("p",[t._v("详细内容可以参考：   "),e("a",{attrs:{href:"https://blog.csdn.net/qq_34337272/article/details/80394121",target:"_blank",rel:"noopener noreferrer"}},[t._v("可能是最漂亮的Spring事务管理详解"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_6锁机制与innodb锁算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6锁机制与innodb锁算法"}},[t._v("#")]),t._v(" ⑥锁机制与InnoDB锁算法")]),t._v(" "),e("p",[e("strong",[t._v("MyISAM和InnoDB存储引擎使用的锁：")])]),t._v(" "),e("ul",[e("li",[t._v("MyISAM采用表级锁(table-level locking)。")]),t._v(" "),e("li",[t._v("InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁")])]),t._v(" "),e("p",[e("strong",[t._v("表级锁和行级锁对比：")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("表级锁：")]),t._v(" Mysql中锁定 "),e("strong",[t._v("粒度最大")]),t._v(" 的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM和 InnoDB引擎都支持表级锁。")]),t._v(" "),e("li",[e("strong",[t._v("行级锁：")]),t._v(" Mysql中锁定 "),e("strong",[t._v("粒度最小")]),t._v(" 的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。")])]),t._v(" "),e("p",[t._v("详细内容可以参考：\n"),e("a",{attrs:{href:"https://blog.csdn.net/qq_34337272/article/details/80611486",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mysql锁机制简单了解一下"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("strong",[t._v("InnoDB存储引擎的锁的算法有三种：")])]),t._v(" "),e("ul",[e("li",[t._v("Record lock：单个行记录上的锁")]),t._v(" "),e("li",[t._v("Gap lock：间隙锁，锁定一个范围，不包括记录本身")]),t._v(" "),e("li",[t._v("Next-key lock：record+gap 锁定一个范围，包含记录本身")])]),t._v(" "),e("p",[e("strong",[t._v("相关知识点：")])]),t._v(" "),e("ol",[e("li",[t._v("innodb对于行的查询使用next-key lock")]),t._v(" "),e("li",[t._v("Next-locking keying为了解决Phantom Problem幻读问题")]),t._v(" "),e("li",[t._v("当查询的索引含有唯一属性时，将next-key lock降级为record key")]),t._v(" "),e("li",[t._v("Gap锁设计的目的是为了阻止多个事务将记录插入到同一范围内，而这会导致幻读问题的产生")]),t._v(" "),e("li",[t._v("有两种方式显式关闭gap锁：（除了外键约束和唯一性检查外，其余情况仅使用record lock） A. 将事务隔离级别设置为RC B. 将参数innodb_locks_unsafe_for_binlog设置为1")])])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_7大表优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7大表优化"}},[t._v("#")]),t._v(" ⑦大表优化")]),t._v(" "),e("p",[t._v("当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：")])])]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("限定数据的范围：")]),t._v(" 务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内。；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("读/写分离：")]),t._v(" 经典的数据库拆分方案，主库负责写，从库负责读；\n3 . "),e("strong",[t._v("垂直分区：")])]),t._v(" "),e("p",[e("strong",[t._v("根据数据库里面数据表的相关性进行拆分。")]),t._v(" 例如，用户表中既有用户的登录信息又有用户的基本信息，可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。")]),t._v(" "),e("p",[e("strong",[t._v("简单来说垂直拆分是指数据表列的拆分，把一张列比较多的表拆分为多张表。")]),t._v(" 如下图所示，这样来说大家应该就更容易理解了。\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/16/164084354ba2e0fd?w=950&h=279&f=jpeg&s=26015",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("垂直拆分的优点：")]),t._v(" 可以使得行数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。")]),t._v(" "),e("p",[e("strong",[t._v("垂直拆分的缺点：")]),t._v(" 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行Join来解决。此外，垂直分区会让事务变得更加复杂；")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("水平分区：")])]),t._v(" "),e("p",[e("strong",[t._v("保持数据表结构不变，通过某种策略存储数据分片。这样每一片数据分散到不同的表或者库中，达到了分布式的目的。 水平拆分可以支撑非常大的数据量。")])]),t._v(" "),e("p",[t._v("水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/16/164084b7e9e423e3?w=690&h=271&f=jpeg&s=23119",alt:"数据库水平拆分"}})]),t._v(" "),e("p",[t._v("水平拆分可以支持非常大的数据量。需要注意的一点是:分表仅仅是解决了单一表数据过大的问题，但由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以 "),e("strong",[t._v("水平拆分最好分库")]),t._v(" 。")]),t._v(" "),e("p",[t._v("水平拆分能够 "),e("strong",[t._v("支持非常大的数据量存储，应用端改造也少")]),t._v("，但 "),e("strong",[t._v("分片事务难以解决")]),t._v("  ，跨界点Join性能较差，逻辑复杂。《Java工程师修炼之道》的作者推荐 "),e("strong",[t._v("尽量不要对数据进行分片，因为拆分会带来逻辑、部署、运维的各种复杂度")]),t._v(" ，一般的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题的。如果实在要分片，尽量选择客户端分片架构，这样可以减少一次和中间件的网络I/O。")]),t._v(" "),e("p",[e("strong",[t._v("下面补充一下数据库分片的两种常见方案：")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("客户端代理：")]),t._v(" "),e("strong",[t._v("分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。")]),t._v(" 当当网的 "),e("strong",[t._v("Sharding-JDBC")]),t._v(" 、阿里的TDDL是两种比较常用的实现。")]),t._v(" "),e("li",[e("strong",[t._v("中间件代理：")]),t._v(" "),e("strong",[t._v("在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。")]),t._v(" 我们现在谈的 "),e("strong",[t._v("Mycat")]),t._v(" 、360的Atlas、网易的DDB等等都是这种架构的实现。")])])])]),t._v(" "),e("p",[t._v("详细内容可以参考：\n"),e("a",{attrs:{href:"https://segmentfault.com/a/1190000006158186",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL大表优化方案"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);