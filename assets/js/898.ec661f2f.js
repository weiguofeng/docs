(window.webpackJsonp=window.webpackJsonp||[]).push([[898],{9802:function(t,_,v){"use strict";v.r(_);var a=v(5),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_1-常见的安全访问方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-常见的安全访问方式"}},[t._v("#")]),t._v(" 1.常见的安全访问方式")]),t._v(" "),v("h4",{attrs:{id:"_1、acl介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、acl介绍"}},[t._v("#")]),t._v(" 1、ACL介绍")]),t._v(" "),v("p",[t._v("​\t\taccess Control List 为访问控制列表，一种访问控制机制，是最早也是最基本的一种访问控制。")]),t._v(" "),v("p",[t._v("​\t\t他的原理非常简单：每一项资源都配有一个列表，这个列表记录的就是哪些用户可以对这项资源执行CURD中的那些操作。当系统试图访问这项资源时，会首先检查这个列表中是否有关于当前用户的访问权限，从而确定当前用户可否执行相应的操作。")]),t._v(" "),v("p",[t._v("​\t\t主要包含三个关键要素用户User，资源Resource和操作Operate。当用户请求操作资源时会检查资源的权限列表，如果资源的权限列表中存在该用户的操作权限则允许否则拒绝。")]),t._v(" "),v("p",[t._v("​\t\t比如linux的权限控制就是使用ACL，比如我们使用的路由器后台管理有个配置设备的限速这也是ACL，这个场景下用户就是mac地址，资源就是路由器的网速，操作就是占用网速")]),t._v(" "),v("p",[t._v("​\t\tACL就是面向资源的访问控制模型，他的机制都是围绕资源展开的，由于ACL比较简单，成本也比较低，使得他几乎不需要任何的基础设施就可以完成访问控制--这是他的优点")]),t._v(" "),v("p",[t._v("​\t\t缺点是：当我们需要维护一个大量的访问权限列表的时候，我们这个列表的记录数就可能会非常的多，当条目数越多他的性能就会下降，所以ACL在性能上就有一个明显的缺陷，另外对于大量的用户和众多资源的应用，那管理访问控制列表本身就会变成一个非常繁重的工作")]),t._v(" "),v("h4",{attrs:{id:"_2、dac介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、dac介绍"}},[t._v("#")]),t._v(" 2、DAC介绍")]),t._v(" "),v("p",[t._v("​\t\tDiscretionary Access Control 自主访问控制模型，其实是ACL的一个变种")]),t._v(" "),v("p",[t._v("​\t\t本质上他还是维护了一个访问控制列表，但是在ACL的基础上：")]),t._v(" "),v("p",[t._v("​\t\t\t规定资源可以被哪些主体进行哪些操作的同时，主体可以将资源，操作权限，授予其他主体")]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t\t比如windows的文件，如果你有这个文件的权限，你还可以给其他用户赋予这个文件的操作权限，但是如果你可以连接一个路由器（路由器配置了你的mac地址），你并不能把连接这个路由器的权限赋予给其他设备，除非你有路由器管理页面的密码")]),t._v(" "),v("p",[t._v("​\t\tDAC强调灵活性，纯粹的ACL，权限由中心管理员统一分配，缺乏灵活性。。为了加强灵活性，在ACL的基础上，DAC模型将授权的权利下放允许拥有权限的用户，可以自主地将权限授予其他用户。")]),t._v(" "),v("p",[t._v("​\t\t一般在实现上，DAC还会引入用户组的概念，多个用户属于一个用户组，给用户组配置权限就相当于给组里所有用户配置权限，这样可以减少很多维护成本。")]),t._v(" "),v("p",[t._v("​\t\t总结DAC：常见于文件系统，Linux，Unix，WindowsNT版本的操作系统都提供了DAC的支持，在实现上，先对用户鉴权，然后根据控制列表决定用户能否访问资源。用户控制权限的修改通常由特权用户或者管理员组实现。DAC最大的缺陷就是对权限控制比较分散，比如无法简单的将一组文件设置统一的权限开放给指定的一群用户。主体的权限太大，无意间就可能泄露信息。")]),t._v(" "),v("h4",{attrs:{id:"_3、mac介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、mac介绍"}},[t._v("#")]),t._v(" 3、mac介绍")]),t._v(" "),v("p",[t._v("​\t强制访问控制模型MAC--Mandatory Access Control")]),t._v(" "),v("p",[t._v("​\tMAC是ACL的另一种实现，强调安全性。Mac会在系统中，对资源与主体，都划分类别与等级，比如，等级分为：秘密级，机密级，绝密级；类别分为：军事人员、财务人员、行政人员。")]),t._v(" "),v("p",[t._v("​\t在模型上，MAC引入了一个级别的概念并且会有和DAC的用户组类似的-类别。")]),t._v(" "),v("p",[t._v("​\t判断一个用户能否对一个资源进行某种操作要校验俩点：")]),t._v(" "),v("p",[t._v("​\t\t1.首先要校验用户的类别")]),t._v(" "),v("p",[t._v("​\t\t2.还要校验该用户在该类别下的级别是否大于操作的要求级别")]),t._v(" "),v("p",[t._v("​\t所以之前一个访问列表的设计就无法满足MAC的要求了，MAC一般会有俩个列表：")]),t._v(" "),v("p",[t._v("​\t\t1.资源配置表：某个资源的某个操作要求是什么类别和什么级别")]),t._v(" "),v("p",[t._v("​\t\t2.用户配置表：某个用户属于哪个类别的那个级别")]),t._v(" "),v("p",[t._v("MAC的优势就是实现资源与主体的双重验证，确保资源的交叉隔离，提高安全性。非常适合机密机构或者其他等级观念强烈的行业，但对于类似商业服务系统，则因为不够灵活而不能适用。")]),t._v(" "),v("h4",{attrs:{id:"_4、rbac介绍-重点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、rbac介绍-重点"}},[t._v("#")]),t._v(" 4、RBAC介绍（重点）")]),t._v(" "),v("p",[t._v("​\tRBAC-（Role-Based Access Control）：基于角色的访问控制，是20世纪90年代研究出来的一种新模型")]),t._v(" "),v("p",[t._v("​\tRBAC支持三个著名的安全原则：最小权限原则、责任分离原则和数据抽象原则")]),t._v(" "),v("p",[t._v("​\t最小权限原则：RBAC可以将角色配置成其完成任务所需的最小权限集合")]),t._v(" "),v("p",[t._v("​\t责任分离原则：可以通过调用相互独立互斥的角色来共同完成敏感的任务，例如要求一个记账员和财务管理员共同参与统一过账操作")]),t._v(" "),v("p",[t._v("​\t数据抽象原则：可以通过权限的抽象来体现，例如财务操作用借款、存款等抽象权限，而不是使用典型的读、写、执行权限。")]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t在RBAC模型里面，有三个基础组成部分，分别是：用户、角色和权限。")]),t._v(" "),v("p",[t._v("​\t\t用户和角色有一个映射关系，角色和权限有一个映射关系")]),t._v(" "),v("p",[t._v("总结：RBAC大量应用于现代企业应用的权限管理设计")]),t._v(" "),v("p",[t._v("​\t\t\t功能强大：RBAC支持三个著名的安全原则：最小权限原则、责任分离原则和数据抽象原则")]),t._v(" "),v("p",[t._v("​\t\t\t扩展灵活：RBAC 由于基础概念简单灵活，可以和企业的实际场景进行融合定制，满足多样的述求")]),t._v(" "),v("p",[t._v("​\t\t\t生态成熟：许多Java安全框架都是基于RBAC进行设计的，如：Shiro，Kasai，Spring Security")]),t._v(" "),v("h4",{attrs:{id:"_5、abac介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、abac介绍"}},[t._v("#")]),t._v(" 5、ABAC介绍")]),t._v(" "),v("p",[t._v("​\tABAC-（Attribute-Based Access Control）基于属性的访问控制，有时也被称为PBAC或CBAC，不同于常见的用户通过某种方式关联到权限的方式。")]),t._v(" "),v("p",[t._v("​\tABAC是通过动态计算一个或一组属性是否满足某种条件而进行的授权判断。")]),t._v(" "),v("p",[t._v("​\tABAC有如下特点：")]),t._v(" "),v("p",[t._v("​\t\t\t集中化管理")]),t._v(" "),v("p",[t._v("​\t\t\t可以按需求实现不同颗粒度的权限控制")]),t._v(" "),v("p",[t._v("​\t\t\t不需要预定义判断逻辑，减轻了权限系统的维护成本，特别是在需求经常变化的系统中")]),t._v(" "),v("p",[t._v("​\t\t\t定义权限时，不能直观看出用户和对象间的关系")])])}),[],!1,null,null,null);_.default=s.exports}}]);