(window.webpackJsonp=window.webpackJsonp||[]).push([[729],{8505:function(t,e,r){"use strict";r.r(e);var a=r(5),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#queue"}},[t._v("Queue")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%9F%E5%88%97"}},[t._v("什么是队列")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E9%98%9F%E5%88%97%E7%9A%84%E7%A7%8D%E7%B1%BB"}},[t._v("队列的种类")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E9%98%9F%E5%88%97-queue"}},[t._v("Java 集合框架中的队列 Queue")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%8E%A8%E8%8D%90%E6%96%87%E7%AB%A0"}},[t._v("推荐文章")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#set"}},[t._v("Set")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF-set"}},[t._v("什么是 Set")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E8%A1%A5%E5%85%85%EF%BC%9A%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E4%B8%8E%E6%97%A0%E5%BA%8F%E9%9B%86%E5%90%88%E8%AF%B4%E6%98%8E"}},[t._v("补充：有序集合与无序集合说明")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#hashset-%E5%92%8C-treeset-%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"}},[t._v("HashSet 和 TreeSet 底层数据结构")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%8E%A8%E8%8D%90%E6%96%87%E7%AB%A0-1"}},[t._v("推荐文章")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#list"}},[t._v("List")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AFlist"}},[t._v("什么是List")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#list%E7%9A%84%E5%B8%B8%E8%A7%81%E5%AE%9E%E7%8E%B0%E7%B1%BB"}},[t._v("List的常见实现类")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#arraylist-%E5%92%8C-linkedlist-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0"}},[t._v("ArrayList 和 LinkedList 源码学习")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB"}},[t._v("推荐阅读")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#map"}},[t._v("Map")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%A0%91"}},[t._v("树")])])]),t._v(" "),r("h2",{attrs:{id:"queue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),r("h3",{attrs:{id:"什么是队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是队列"}},[t._v("#")]),t._v(" 什么是队列")]),t._v(" "),r("p",[t._v("队列是数据结构中比较重要的一种类型，它支持 FIFO，尾部添加、头部删除（先进队列的元素先出队列），跟我们生活中的排队类似。")]),t._v(" "),r("h3",{attrs:{id:"队列的种类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队列的种类"}},[t._v("#")]),t._v(" 队列的种类")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("单队列")]),t._v("（单队列就是常见的队列, 每次添加元素时，都是添加到队尾，存在“假溢出”的问题也就是明明有位置却不能添加的情况）")]),t._v(" "),r("li",[r("strong",[t._v("循环队列")]),t._v("（避免了“假溢出”的问题）")])]),t._v(" "),r("h3",{attrs:{id:"java-集合框架中的队列-queue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-集合框架中的队列-queue"}},[t._v("#")]),t._v(" Java 集合框架中的队列 Queue")]),t._v(" "),r("p",[t._v("Java 集合中的 Queue 继承自 Collection 接口 ，Deque, LinkedList, PriorityQueue, BlockingQueue 等类都实现了它。\nQueue 用来存放 等待处理元素 的集合，这种场景一般用于缓冲、并发访问。\n除了继承 Collection 接口的一些方法，Queue 还添加了额外的 添加、删除、查询操作。")]),t._v(" "),r("h3",{attrs:{id:"推荐文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推荐文章"}},[t._v("#")]),t._v(" 推荐文章")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/u011240877/article/details/52860924",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 集合深入理解（9）：Queue 队列"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"set"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),r("h3",{attrs:{id:"什么是-set"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-set"}},[t._v("#")]),t._v(" 什么是 Set")]),t._v(" "),r("p",[t._v("Set 继承于 Collection 接口，是一个不允许出现重复元素，并且无序的集合，主要 HashSet 和 TreeSet 两大实现类。")]),t._v(" "),r("p",[t._v("在判断重复元素的时候，Set 集合会调用 hashCode()和 equal()方法来实现。")]),t._v(" "),r("h3",{attrs:{id:"补充-有序集合与无序集合说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#补充-有序集合与无序集合说明"}},[t._v("#")]),t._v(" 补充：有序集合与无序集合说明")]),t._v(" "),r("ul",[r("li",[t._v("有序集合：集合里的元素可以根据 key 或 index 访问 (List、Map)")]),t._v(" "),r("li",[t._v("无序集合：集合里的元素只能遍历。（Set）")])]),t._v(" "),r("h3",{attrs:{id:"hashset-和-treeset-底层数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashset-和-treeset-底层数据结构"}},[t._v("#")]),t._v(" HashSet 和 TreeSet 底层数据结构")]),t._v(" "),r("p",[r("strong",[t._v("HashSet")]),t._v(" 是哈希表结构，主要利用 HashMap 的 key 来存储元素，计算插入元素的 hashCode 来获取元素在集合中的位置；")]),t._v(" "),r("p",[r("strong",[t._v("TreeSet")]),t._v(" 是红黑树结构，每一个元素都是树中的一个节点，插入的元素都会进行排序；")]),t._v(" "),r("h3",{attrs:{id:"推荐文章-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推荐文章-2"}},[t._v("#")]),t._v(" 推荐文章")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.jianshu.com/p/b48c47a42916",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java集合--Set(基础)"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"list"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),r("h3",{attrs:{id:"什么是list"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是list"}},[t._v("#")]),t._v(" 什么是List")]),t._v(" "),r("p",[t._v("在 List 中，用户可以精确控制列表中每个元素的插入位置，另外用户可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。 与 Set 不同，List 通常允许重复的元素。 另外 List 是有序集合而 Set 是无序集合。")]),t._v(" "),r("h3",{attrs:{id:"list的常见实现类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#list的常见实现类"}},[t._v("#")]),t._v(" List的常见实现类")]),t._v(" "),r("p",[r("strong",[t._v("ArrayList")]),t._v(" 是一个数组队列，相当于动态数组。它由数组实现，随机访问效率高，随机插入、随机删除效率低。")]),t._v(" "),r("p",[r("strong",[t._v("LinkedList")]),t._v(" 是一个双向链表。它也可以被当作堆栈、队列或双端队列进行操作。LinkedList随机访问效率低，但随机插入、随机删除效率高。")]),t._v(" "),r("p",[r("strong",[t._v("Vector")]),t._v(" 是矢量队列，和ArrayList一样，它也是一个动态数组，由数组实现。但是ArrayList是非线程安全的，而Vector是线程安全的。")]),t._v(" "),r("p",[r("strong",[t._v("Stack")]),t._v(" 是栈，它继承于Vector。它的特性是：先进后出(FILO, First In Last Out)。相关阅读："),r("a",{attrs:{href:"https://blog.csdn.net/javazejian/article/details/53362993",target:"_blank",rel:"noopener noreferrer"}},[t._v("java数据结构与算法之栈（Stack）设计与实现"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"arraylist-和-linkedlist-源码学习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-linkedlist-源码学习"}},[t._v("#")]),t._v(" ArrayList 和 LinkedList 源码学习")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/Snailclimb/Java-Guide/blob/master/Java%E7%9B%B8%E5%85%B3/ArrayList.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ArrayList 源码学习"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/Snailclimb/Java-Guide/blob/master/Java%E7%9B%B8%E5%85%B3/LinkedList.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LinkedList 源码学习"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"推荐阅读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[t._v("#")]),t._v(" 推荐阅读")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/javazejian/article/details/52953190",target:"_blank",rel:"noopener noreferrer"}},[t._v("java 数据结构与算法之顺序表与链表深入分析"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"map"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/post/5ab0568b5188255580020e56",target:"_blank",rel:"noopener noreferrer"}},[t._v("集合框架源码学习之 HashMap(JDK1.8)"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fchengxiao%2Fp%2F6842045.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrentHashMap 实现原理及源码分析"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),r("ul",[r("li",[r("h3",{attrs:{id:"_1-二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-二叉树"}},[t._v("#")]),t._v(" 1 二叉树")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树"),r("OutboundLink")],1),t._v("（百度百科）")]),t._v(" "),r("p",[t._v("(1)"),r("a",{attrs:{href:"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("完全二叉树"),r("OutboundLink")],1),t._v("——若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。")]),t._v(" "),r("p",[t._v("(2)"),r("a",{attrs:{href:"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("满二叉树"),r("OutboundLink")],1),t._v("——除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。")]),t._v(" "),r("p",[t._v("(3)"),r("a",{attrs:{href:"https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057",target:"_blank",rel:"noopener noreferrer"}},[t._v("平衡二叉树"),r("OutboundLink")],1),t._v("——平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。")])]),t._v(" "),r("li",[r("h3",{attrs:{id:"_2-完全二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-完全二叉树"}},[t._v("#")]),t._v(" 2 完全二叉树")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("完全二叉树"),r("OutboundLink")],1),t._v("（百度百科）")]),t._v(" "),r("p",[t._v("完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树")])]),t._v(" "),r("li",[r("h3",{attrs:{id:"_3-满二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-满二叉树"}},[t._v("#")]),t._v(" 3 满二叉树")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://baike.baidu.com/item/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("满二叉树"),r("OutboundLink")],1),t._v("（百度百科，国内外的定义不同）")]),t._v(" "),r("p",[t._v("国内教程定义：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树。")])]),t._v(" "),r("li",[r("h3",{attrs:{id:"堆"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/qq_33186366/article/details/51876191",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据结构之堆的定义"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆")])]),t._v(" "),r("li",[r("h3",{attrs:{id:"_4-二叉查找树-bst"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-二叉查找树-bst"}},[t._v("#")]),t._v(" 4 二叉查找树（BST）")]),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈算法和数据结构: 七 二叉查找树"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("二叉查找树的特点：")]),t._v(" "),r("ol",[r("li",[t._v("若任意节点的左子树不空，则左子树上所有结点的     值均小于它的根结点的值；")]),t._v(" "),r("li",[t._v("若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；")]),t._v(" "),r("li",[t._v("任意节点的左、右子树也分别为二叉查找树。")]),t._v(" "),r("li",[t._v("没有键值相等的节点（no duplicate nodes）。")])])]),t._v(" "),r("li",[r("h3",{attrs:{id:"_5-平衡二叉树-self-balancing-binary-search-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-平衡二叉树-self-balancing-binary-search-tree"}},[t._v("#")]),t._v(" 5 平衡二叉树（Self-balancing binary search tree）")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 平衡二叉树"),r("OutboundLink")],1),t._v("（百度百科，平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等）")])]),t._v(" "),r("li",[r("h3",{attrs:{id:"_6-红黑树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-红黑树"}},[t._v("#")]),t._v(" 6 红黑树")]),t._v(" "),r("ul",[r("li",[t._v("红黑树特点:")])]),t._v(" "),r("ol",[r("li",[t._v("每个节点非红即黑；")]),t._v(" "),r("li",[t._v("根节点总是黑色的；")]),t._v(" "),r("li",[t._v("每个叶子节点都是黑色的空节点（NIL节点）；")]),t._v(" "),r("li",[t._v("如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；")]),t._v(" "),r("li",[t._v("从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("红黑树的应用：")]),t._v(" "),r("p",[t._v("TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。")])]),t._v(" "),r("li",[r("p",[t._v("为什么要用红黑树")]),t._v(" "),r("p",[t._v("简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。详细了解可以查看 "),r("a",{attrs:{href:"https://juejin.im/post/5a27c6946fb9a04509096248#comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("漫画：什么是红黑树？"),r("OutboundLink")],1),t._v("（也介绍到了二叉查找树，非常推荐）")])]),t._v(" "),r("li",[r("p",[t._v("推荐文章：")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/post/5a27c6946fb9a04509096248#comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("漫画：什么是红黑树？"),r("OutboundLink")],1),t._v("（也介绍到了二叉查找树，非常推荐）")]),t._v(" "),r("li",[r("a",{attrs:{href:"http://dandanlove.com/2018/03/18/red-black-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("寻找红黑树的操作手册"),r("OutboundLink")],1),t._v("（文章排版以及思路真的不错）")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/24367771",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树深入剖析及Java实现"),r("OutboundLink")],1),t._v("（美团点评技术团队）")])])])])]),t._v(" "),r("li",[r("h3",{attrs:{id:"_7-b-b-b-树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-b-b-b-树"}},[t._v("#")]),t._v(" 7 B-，B+，B*树")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://yq.aliyun.com/articles/38345",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树学习笔记之B树、B+树、B*树 "),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/aqzwss/article/details/53074186",target:"_blank",rel:"noopener noreferrer"}},[t._v("《B-树，B+树，B*树详解》"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/bigtree_3721/article/details/73632405",target:"_blank",rel:"noopener noreferrer"}},[t._v("《B-树，B+树与B*树的优缺点比较》"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("B-树（或B树）是一种平衡的多路查找(又称排序)树，在文件系统中有所应用。主要用作文件的索引。其中的B就表示平衡(Balance)")])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("1. B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。\n2. B+树支持range-query(区间查询)非常方便，而B树不支持。这是数据库选用B+树的最主要原因。\n3. B\\*树 是B+树的变体，B\\*树分配新结点的概率比B+树要低，空间使用率更高；\n")])])]),r("ul",[r("li",[r("h3",{attrs:{id:"_8-lsm-树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-lsm-树"}},[t._v("#")]),t._v(" 8 LSM 树")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/dbanote/article/details/8897599",target:"_blank",rel:"noopener noreferrer"}},[t._v("[HBase] LSM树 VS B+树"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("B+树最大的性能问题是会产生大量的随机IO")]),t._v(" "),r("p",[t._v("为了克服B+树的弱点，HBase引入了LSM树的概念，即Log-Structured Merge-Trees。")]),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.cnblogs.com/yanghuahui/p/3483754.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("LSM树由来、设计思想以及应用到HBase的索引"),r("OutboundLink")],1)])])]),t._v(" "),r("h2",{attrs:{id:"图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[t._v("#")]),t._v(" 图")]),t._v(" "),r("h2",{attrs:{id:"bfs及dfs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bfs及dfs"}},[t._v("#")]),t._v(" BFS及DFS")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/Gene1994/article/details/85097507",target:"_blank",rel:"noopener noreferrer"}},[t._v("《使用BFS及DFS遍历树和图的思路及实现》"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);