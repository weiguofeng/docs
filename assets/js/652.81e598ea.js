(window.webpackJsonp=window.webpackJsonp||[]).push([[652],{4647:function(s,t,e){s.exports=e.p+"assets/img/1625224207657.b34e2b42.png"},8597:function(s,t,e){"use strict";e.r(t);var a=e(5),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"你能说说redis的并发竞争问题该如何解决吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你能说说redis的并发竞争问题该如何解决吗"}},[s._v("#")]),s._v(" 你能说说redis的并发竞争问题该如何解决吗？")]),s._v(" "),a("h4",{attrs:{id:"_1-面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-面试题"}},[s._v("#")]),s._v(" 1.面试题")]),s._v(" "),a("p",[s._v("​\t"),a("strong",[s._v("redis的并发竞争问题是什么？如何解决这个问题？了解Redis事务的CAS方案吗？")])]),s._v(" "),a("h4",{attrs:{id:"_2-面试官心里分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-面试官心里分析"}},[s._v("#")]),s._v(" 2.面试官心里分析")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t这个也是线上很常见的问题，就是多客户端并发写一个key，可能本来应该先到的数据后到了，导致数据版本错了。或者是多客户端同时获取一个key，修改值之后再写回去，只要顺序错了，数据就错了。\n\t\n\t而且redis自己就有天然解决这个问题的CAS类的乐观锁方案\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"_3-面试题剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-面试题剖析"}},[s._v("#")]),s._v(" 3.面试题剖析")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tredis并发竞争的问题，因为redis的数据都是从数据库获取的，那么在写入数据库的时候保存一个时间戳，在redis并发保存数据的时候先做分布式锁，然后写入redis之前 再做时间戳检查，检查数据是不是比上一次的时间戳要大，大那就是最新的。顺序就正确了。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("redis并发竞争以及解决方案")])]),s._v(" "),a("p",[a("img",{attrs:{src:e(4647),alt:"1625224207657"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);