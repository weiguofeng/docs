(window.webpackJsonp=window.webpackJsonp||[]).push([[596],{5840:function(t,e,s){t.exports=s.p+"assets/img/image-20220406222259442.26384089.png"},5841:function(t,e,s){t.exports=s.p+"assets/img/image-20220406222040386.90d5917a.png"},5842:function(t,e,s){t.exports=s.p+"assets/img/image-20220406222506768.64e04344.png"},9331:function(t,e,s){"use strict";s.r(e);var a=s(5),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_12-构造函数重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-构造函数重载"}},[t._v("#")]),t._v(" 12.构造函数重载")]),t._v(" "),a("p",[t._v("​\t\tConstructor Overloading 构造器重载")]),t._v(" "),a("p",[t._v("​\t\t前面我们学习了方法重载，我们也可以重载构造函数，因为从技术上讲，构造器也是一种方法。")]),t._v(" "),a("p",[t._v("​\t\t例如：在创建Employee对象时，我们想象一下我们的一些员工，他们有基本工资，给个月也可以加班可以不加班，我们不想通过重载方法的方式处理，我们更喜欢重载构造函数的方式")]),t._v(" "),a("p",[a("img",{attrs:{src:s(5840),alt:"image-20220406222259442"}})]),t._v(" "),a("p",[t._v("​\tcommand + b 可以快速调到光标所选的方法")]),t._v(" "),a("p",[a("img",{attrs:{src:s(5841),alt:"image-20220406222040386"}})]),t._v(" "),a("p",[t._v("现在我们回到main主类中")]),t._v(" "),a("p",[t._v("new Employee（10000）；")]),t._v(" "),a("p",[t._v("查看方法参数的快捷键 Command + P")]),t._v(" "),a("p",[a("img",{attrs:{src:s(5842),alt:"image-20220406222506768"}})])])}),[],!1,null,null,null);e.default=n.exports}}]);