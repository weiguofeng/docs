(window.webpackJsonp=window.webpackJsonp||[]).push([[476],{5736:function(t,a,e){t.exports=e.p+"assets/img/image-20220331223206662.ebcd0620.png"},5737:function(t,a,e){t.exports=e.p+"assets/img/image-20220331223235622.301f02e1.png"},5738:function(t,a,e){t.exports=e.p+"assets/img/image-20220331224527893.0d7a0a4a.png"},5739:function(t,a,e){t.exports=e.p+"assets/img/image-20220331225324914.59c6ec01.png"},5740:function(t,a,e){t.exports=e.p+"assets/img/image-20220331225413391.4283b20c.png"},8979:function(t,a,e){"use strict";e.r(a);var s=e(5),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_5-内存分配memory-allocation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-内存分配memory-allocation"}},[t._v("#")]),t._v(" 5.内存分配Memory-Allocation")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("\t我们了解一下引擎下，创建对象时会发生什么。\n")])])]),s("p",[t._v("​\t\tJava管理2个不同的内存区域，一个是HEAP堆，这是它存储对象的地方。")]),t._v(" "),s("p",[t._v("​\t\t\t另外一个区域是STACK这就是它存储短期变量的地方，以及存储引用的变量，指向在堆的对象")]),t._v(" "),s("p",[s("img",{attrs:{src:e(5736),alt:"image-20220331223206662"}})]),t._v(" "),s("p",[t._v("看看这段代码：")]),t._v(" "),s("p",[t._v("​\t当java运行执行操作时，首先他将评估 运算符 new右侧的内容，因此它将创建一个新的TextBox对象，并将其存储到heap里。")]),t._v(" "),s("p",[t._v("​\t\t现在我们假设堆上的这个对象的地址是100，然后java运行时将执行此操作，它将在堆栈上分配一些内存，，在这个内存位置，它将存储我们的heap上的TextBox对象，所以我们这里有一个变量，正在引用堆上的对象，这就是为什么我们将这些变量称为"),s("strong",[t._v("引用类型")]),t._v(" 因为这些变量不是存储的实际的值。")]),t._v(" "),s("p",[t._v("​\t基本类型就不同了，当我们声明一个integer，该整数存储在堆栈上，并且变量中的数据将存储在该内存的位置上")]),t._v(" "),s("p",[s("img",{attrs:{src:e(5737),alt:"image-20220331223235622"}})]),t._v(" "),s("p",[t._v("我们再举一个例子，比如")]),t._v(" "),s("p",[s("img",{attrs:{src:e(5738),alt:"image-20220331224527893"}})]),t._v(" "),s("p",[t._v("在这个例子中2个变量 textBox1和textBox2 引用堆上相同的TextBox对象")]),t._v(" "),s("p",[t._v("​\t所以我们没有俩个不同的TextBox对象，只有一个TextBox对象，堆栈上有2个变量引用了这个对象，这意味着，如果我通过其中一个引用或变量，其中一个变量发生变化时，可以 从另一个变量中看到")]),t._v(" "),s("p",[t._v("​\t这里我们使用textBox2，将值字段text设置一下，然后使用第一个变量输出一下值")]),t._v(" "),s("p",[t._v("​\t我们看一下效果")]),t._v(" "),s("p",[s("img",{attrs:{src:e(5739),alt:"image-20220331225324914"}})]),t._v(" "),s("p",[t._v("​\t\t可以获得到变量 textBox2的值，这证明2个变量都引用了同一个对象")]),t._v(" "),s("p",[s("img",{attrs:{src:e(5740),alt:"image-20220331225413391"}})]),t._v(" "),s("p",[t._v("​\t那么我们的内存如何释放呢？在java中我们不像C++，我们不需要担心释放内存，java会自动处理这个问题。当我们运行完一个方法时，它会立即删除堆栈中存储的所有变量，以上这个例子2个变量都存储于堆栈中，我们执行完任务后，他们将立即被移除")]),t._v(" "),s("p",[t._v("​\t\t他会监视堆上的这些对象，如果一段时间内未被使用过，该过程将自动停止，并移除堆上的对象，这就是所谓的垃圾收集")]),t._v(" "),s("p",[t._v("​\t\tjava运行时有一个叫做垃圾收集器的组件，他将自动删除堆上未使用的对象，这就是java中的内存分配和释放")])])}),[],!1,null,null,null);a.default=v.exports}}]);