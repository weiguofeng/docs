(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{4e3:function(t,s,_){t.exports=_.p+"assets/img/1682668313300.19fc01e1.png"},4001:function(t,s,_){t.exports=_.p+"assets/img/1682669965624.4512e416.png"},4002:function(t,s,_){t.exports=_.p+"assets/img/1682671039624.d70a8ec2.png"},4003:function(t,s,_){t.exports=_.p+"assets/img/1682671086750.7c1e4716.png"},4004:function(t,s,_){t.exports=_.p+"assets/img/1682671188911.2d100f46.png"},4005:function(t,s,_){t.exports=_.p+"assets/img/1682671257131.fdcf32bc.png"},4006:function(t,s,_){t.exports=_.p+"assets/img/1682671310905.3894e34a.png"},4007:function(t,s,_){t.exports=_.p+"assets/img/1682671612233.9c1f8453.png"},4008:function(t,s,_){t.exports=_.p+"assets/img/1682673270167.c14d2eec.png"},4009:function(t,s,_){t.exports=_.p+"assets/img/1682673407256.d5f62566.png"},4010:function(t,s,_){t.exports=_.p+"assets/img/1682673550270.4d327892.png"},4011:function(t,s,_){t.exports=_.p+"assets/img/1682673658487.206bc4fb.png"},4012:function(t,s,_){t.exports=_.p+"assets/img/1682673818649.6a58feb4.png"},4013:function(t,s,_){t.exports=_.p+"assets/img/1682673986281.860ce3a9.png"},4014:function(t,s,_){t.exports=_.p+"assets/img/1682674100008.3dfea9c6.png"},4015:function(t,s,_){t.exports=_.p+"assets/img/1682674185708.553fc21a.png"},4016:function(t,s,_){t.exports=_.p+"assets/img/1682674681265.2a645065.png"},4017:function(t,s,_){t.exports=_.p+"assets/img/1682674936583.a9993653.png"},4018:function(t,s,_){t.exports=_.p+"assets/img/1682674819640.04f75b7f.png"},4019:function(t,s,_){t.exports=_.p+"assets/img/1682668967764.e5d0485b.png"},4020:function(t,s,_){t.exports=_.p+"assets/img/1682670536652.d5ddeb71.png"},8441:function(t,s,_){"use strict";_.r(s);var v=_(5),p=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"dockerfile基本语法3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile基本语法3"}},[t._v("#")]),t._v(" dockerFile基本语法3")]),t._v(" "),v("p",[t._v("官方文档：")]),t._v(" "),v("p",[t._v("https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#from")]),t._v(" "),v("p",[t._v("reference --参考：https://docs.docker.com/engine/reference/builder/#from")]),t._v(" "),v("h2",{attrs:{id:"_1、指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、指令"}},[t._v("#")]),t._v(" 1、指令")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4e3),alt:"1682668313300"}})]),t._v(" "),v("h4",{attrs:{id:"_1-1、from"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、from"}},[t._v("#")]),t._v(" 1.1、FROM：")]),t._v(" "),v("p",[t._v("​\tFROM--指令初始化新的构建阶段，并为后续指令设置基本映像。因此，有效的 "),v("code",[t._v("Dockerfile")]),t._v(" 必须以 "),v("code",[t._v("FROM")]),t._v(" 指令开始。映像可以是任何有效的映像-从公共存储库中提取映像开始特别容易。")]),t._v(" "),v("h4",{attrs:{id:"_1-2、run"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、run"}},[t._v("#")]),t._v(" 1.2、RUN：")]),t._v(" "),v("p",[t._v("​\tRUN有两种形式--")]),t._v(" "),v("p",[t._v("​\t\t\tshell形式，该命令在shell中运行，默认情况下在Linux上为 "),v("code",[t._v("/bin/sh -c")]),t._v(" ，在Windows上为 "),v("code",[t._v("cmd /S /C")])]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t"),v("code",[t._v("RUN")]),t._v(" 指令将在当前镜像之上的新层中执行任何命令并提交结果。得到的提交映像将用于 "),v("code",[t._v("Dockerfile")]),t._v(" 中的下一步。")]),t._v(" "),v("p",[t._v('​\t例如：RUN ["/bin/bash", "-c", "echo hello"]')]),t._v(" "),v("p",[t._v("​\t其实run就是执行一些 脚本")]),t._v(" "),v("h4",{attrs:{id:"_1-3、add"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、add"}},[t._v("#")]),t._v(" 1.3、ADD")]),t._v(" "),v("p",[t._v("​\t\t\tadd命令--其实就是添加一些内容，他和copy基本差不多")]),t._v(" "),v("p",[t._v("​\t\t\t比copy命令强大的地方是 可以设置一个连接 可以自动的帮我们下载")]),t._v(" "),v("h4",{attrs:{id:"_1-4、cmd"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4、cmd"}},[t._v("#")]),t._v(" 1.4、CMD")]),t._v(" "),v("p",[t._v("​\t\t\t\tcmd翻译过来就是 command 命令行")]),t._v(" "),v("p",[t._v("​\t\t\t\tCMD可以有多个指令--但是只有最后一个生效")]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t\t\t无论是CMD还是ENTRYPOINT都是俩种语法格式")]),t._v(" "),v("p",[t._v("​\t\t\t\t1、直接命令的方式")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\t如：java -jar ems.jar")]),t._v(" "),v("p",[t._v("​\t\t\t\t2、还支持json数组的方式")]),t._v(" "),v("p",[t._v('​\t\t\t\t\t\t【“java”,"-jar", "ems.jar"】')]),t._v(" "),v("p",[v("img",{attrs:{src:_(4001),alt:"1682669965624"}})]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t案例：我们希望在容器启动的后，展示app-data下的文件")]),t._v(" "),v("p",[t._v("​\t\t编写dockerfile文件")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4002),alt:"1682671039624"}})]),t._v(" "),v("p",[t._v("​\t构建镜像：")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4003),alt:"1682671086750"}})]),t._v(" "),v("p",[t._v("​\t\t我们运行这个镜像的时候，他就会执行CMD中的指令 ls")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4004),alt:"1682671188911"}})]),t._v(" "),v("p",[t._v("​\t将CMD命令切换为ENTRYPOINT看看效果：")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4005),alt:"1682671257131"}})]),t._v(" "),v("p",[t._v("​\t我们看到效果是一致的")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4006),alt:"1682671310905"}})]),t._v(" "),v("p",[t._v("​\t\t那么--CMD和ENTRYPOINT的区别是什么？")]),t._v(" "),v("p",[t._v("​\t\t\t举例：假设我们现在不想看apps/data,而是 apps")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4007),alt:"1682671612233"}})]),t._v(" "),v("p",[t._v("​\t\t我们发现报错了")]),t._v(" "),v("p",[t._v("​\t\t如果我们使用 ls /apps就可以了")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4008),alt:"1682673270167"}})]),t._v(" "),v("p",[t._v("​\t\t这就是为什么建议使用json的方式了，因为这种方式不支持传参")]),t._v(" "),v("p",[t._v("​\t\t如果我们使用 json数组的方式")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4009),alt:"1682673407256"}})]),t._v(" "),v("p",[t._v("​\t注意 环境变量也得加引号")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4010),alt:"1682673550270"}})]),t._v(" "),v("p",[t._v("​\t可能是环境变量不能这么用--路径写死把")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4011),alt:"1682673658487"}})]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t\t如果我们想变命令，按之前数组的顺序就可以进行参数传递和替换")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4012),alt:"1682673818649"}})]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t但是如果是使用ENTRYPOINT 命令的话，参数也是传递进来了，但是并没有覆盖，都执行了")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4013),alt:"1682673986281"}})]),t._v(" "),v("p",[t._v("​\t如果使用ENTRYPOINT命令想覆盖命令的话 就需要加上参数 -- entrypoint=key")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4014),alt:"1682674100008"}})]),t._v(" "),v("p",[v("img",{attrs:{src:_(4015),alt:"1682674185708"}})]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("https://www.bilibili.com/video/BV1wQ4y1Y7SE?p=26&vd_source=243ad3a9b323313aa1441e5dd414a4ef")]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t其实CMD和ENTRYPOINT是配合使用的，一些固定的命令 我们使用ENTRYPOINT，一些可变的命令我们使用CMD")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4016),alt:"1682674681265"}})]),t._v(" "),v("p",[t._v("​\t直接传参的方式--执行命令，替换CMD之前的命令")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4017),alt:"1682674936583"}})]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4018),alt:"1682674819640"}})]),t._v(" "),v("h4",{attrs:{id:"_1-5、entrypoint"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5、entrypoint"}},[t._v("#")]),t._v(" 1.5、ENTRYPOINT")]),t._v(" "),v("p",[t._v("​\t\t\t\tentryPoint -- 就是俩个单词合并--进入点 也就是执行点")]),t._v(" "),v("p",[t._v("​\t\t\t\t与CMD 命令的作用一样")]),t._v(" "),v("p",[t._v("​\t\t\t\t用来指定容器启动时，默认执行的指令")]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("p",[t._v("​\t\t比如：redis镜像，我们在docker run redis 这个镜像的时候，为什么我们在这里run就可以启动这个redis服务呢，原因是人家这个redis容器内部  执行了 redis-server 这个脚本")]),t._v(" "),v("p",[t._v("​\t\t那么就是在运行redis容器的时候，它默认 就是执行 一个redis-server的这个指令")]),t._v(" "),v("p",[t._v("​\t\t假设我们自己的EMS项目的镜像，如果要启动这个容器，那么就需要默认执行一个 java -jar ems.jar的指令")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4019),alt:"1682668967764"}})]),t._v(" "),v("p",[t._v("​\t所以说 EntryPoint 和CMD都是用来指定容器默认执行的指令/命令的")]),t._v(" "),v("p",[t._v("​\t\t无论是CMD还是ENTRYPOINT都是俩种语法格式")]),t._v(" "),v("p",[t._v("​\t\t\t\t1、直接命令的方式")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\t如：java -jar ems.jar")]),t._v(" "),v("p",[t._v("​\t\t\t\t2、还支持json数组的方式")]),t._v(" "),v("p",[t._v('​\t\t\t\t\t\t【“java”,"-jar", "ems.jar"】')]),t._v(" "),v("p",[t._v("​\t这俩种方式 推荐 使用json数组的方式")]),t._v(" "),v("p",[v("img",{attrs:{src:_(4020),alt:"1682670536652"}})])])}),[],!1,null,null,null);s.default=p.exports}}]);