(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{2395:function(t,s,e){t.exports=e.p+"assets/img/1640916598055.fd3a3c8d.png"},2396:function(t,s,e){t.exports=e.p+"assets/img/1640916749980.1b275d44.png"},2397:function(t,s,e){t.exports=e.p+"assets/img/1640917293489.708d6b65.png"},2398:function(t,s,e){t.exports=e.p+"assets/img/1640917361827.e44d0a60.png"},2399:function(t,s,e){t.exports=e.p+"assets/img/1640918516897.1e2c01b3.png"},2400:function(t,s,e){t.exports=e.p+"assets/img/1640918588048.0800feaf.png"},2401:function(t,s,e){t.exports=e.p+"assets/img/1640919265372.aab9f280.png"},2402:function(t,s,e){t.exports=e.p+"assets/img/1640920252912.8361f890.png"},2403:function(t,s,e){t.exports=e.p+"assets/img/1640920313998.3be73bb7.png"},2404:function(t,s,e){t.exports=e.p+"assets/img/1640930616882.77dfd0cc.png"},2405:function(t,s,e){t.exports=e.p+"assets/img/1640930556485.cf9f03a9.png"},2406:function(t,s,e){t.exports=e.p+"assets/img/1640930844663.5a66805c.png"},2407:function(t,s,e){t.exports=e.p+"assets/img/1640930988518.061c6a9c.png"},2408:function(t,s,e){t.exports=e.p+"assets/img/1640931121773.2d1f4900.png"},2409:function(t,s,e){t.exports=e.p+"assets/img/1640931306958.14bce5d7.png"},2410:function(t,s,e){t.exports=e.p+"assets/img/1640931491100.0fb137ec.png"},2411:function(t,s,e){t.exports=e.p+"assets/img/1640931758607.9ce5a764.png"},8407:function(t,s,e){"use strict";e.r(s);var r=e(5),p=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"_6-状态管理-创建store"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-状态管理-创建store"}},[t._v("#")]),t._v(" 6.状态管理-创建store")]),t._v(" "),r("p",[t._v("​\t我们的目的--就是点击按钮控制侧边栏隐藏和显示")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2395),alt:"1640916598055"}})]),t._v(" "),r("h3",{attrs:{id:"_1、我们先下载一下redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、我们先下载一下redux"}},[t._v("#")]),t._v(" 1、我们先下载一下redux")]),t._v(" "),r("p",[t._v("​\t\t先把这俩个小模块安装上去")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2396),alt:"1640916749980"}})]),t._v(" "),r("p",[t._v("​")]),t._v(" "),r("p",[t._v("安装好了之后--我们想一下使用redux思路：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\t首先你得对你的组件进行一个包装，也就是他里面得有一个connect的函数，包装成高阶组件--》然后让你的父组件来负责帮你订阅和dispatch发送，然后对应的还得把你的store创建出来，而且还得把你的reduesce纯函数给构建起来---现在我们开始实现一下\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("h3",{attrs:{id:"_2、使用redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用redux"}},[t._v("#")]),t._v(" 2、使用redux")]),t._v(" "),r("p",[t._v("创建redux文件夹--新建store.js文件（这个文件将来放的就是store的创建）")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2397),alt:"1640917293489"}})]),t._v(" "),r("p",[t._v("引入createStore来创建我们的store对象")]),t._v(" "),r("p",[t._v("​\t创建的这个store需要接收一个reducer函数")]),t._v(" "),r("p",[t._v("​\t最后导出store")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2398),alt:"1640917361827"}})]),t._v(" "),r("p",[t._v("然后我们新建一个reducer文件夹--里面专门放reducer")]),t._v(" "),r("p",[t._v("​\t先创建一个CollapsedReducer.js折叠的reducer--\x3e其实他就是一个函数--要保证他是纯函数设计")]),t._v(" "),r("p",[t._v("​\t还要接收一个prevState旧的状态---还会得到一个action")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2399),alt:"1640918516897"}})]),t._v(" "),r("p",[t._v("​\t然后先return 一下，先保证结构是正确的")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2400),alt:"1640918588048"}})]),t._v(" "),r("p",[t._v("​\t因为我们可能后续要给store传入很多reducer，但是默认是只能接收一个reducer，这样我们就可以使用combineReducer进行合并多个reducer")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2401),alt:"1640919265372"}})]),t._v(" "),r("p",[t._v("​\t后续的思路--就是我们会有 store.dispatch() 到reducer 拿到旧值-处理-返回新值到store")]),t._v(" "),r("p",[t._v("​\t还应该有订阅 store.subribe() ,在组件中之前订阅的回调函数就被触发了")]),t._v(" "),r("p",[t._v("那么如果我们自己去监听订阅和发布就属于手动操作--这个时候我们引入react-redux就不需要自己去订阅和发布了")]),t._v(" "),r("p",[t._v("​\t我们可以让我们的父组件做发布和订阅的工作")]),t._v(" "),r("p",[t._v("​\t使用Provider包装一下整个根组件")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2402),alt:"1640920252912"}})]),t._v(" "),r("p",[t._v("​\t让他最开始就提供一个store对象--这样我们所有的组件就都可以获取到store了")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2403),alt:"1640920313998"}})]),t._v(" "),r("p",[t._v("​\t"),r("strong",[t._v("那么谁需要这个store呢--我们的SideMenu和TopHeader他們俩都需要，因为他们需要共享一个数据")])]),t._v(" "),r("p",[t._v("​\t"),r("strong",[t._v("TopHeader是发布者---SideMenu是订阅者，因为隐藏的按钮事件触发是在TopHeader中")])]),t._v(" "),r("p",[t._v("​")]),t._v(" "),r("p",[t._v("​\tTopHeader中引入 react-redux的connect")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2404),alt:"1640930616882"}})]),t._v(" "),r("p",[t._v("然后使用connect在导出的时候包裹整个组件，包裹的顺序个高阶组件的包裹不冲突")]),t._v(" "),r("p",[t._v("​\tconnect()(包裹的组件)")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2405),alt:"1640930556485"}})]),t._v(" "),r("p",[t._v("​\t\t现在我们往TopHeader组件中放入一个对象 里面有个 a:1,他会帮助我们映射到props中")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2406),alt:"1640930844663"}})]),t._v(" "),r("p",[t._v("​\t打印一下props，看看里面的内容是否存在")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2407),alt:"1640930988518"}})]),t._v(" "),r("p",[t._v("​\t页面打开有报错--原因是我们之前的CollapsedReducer.js没有初始化值")]),t._v(" "),r("p",[t._v("​\t设置一下初始化的值--旧值")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2408),alt:"1640931121773"}})]),t._v(" "),r("p",[t._v("​\t我们可以看到是可以在props中获取到这个connect传入的对象的内容的")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2409),alt:"1640931306958"}})]),t._v(" "),r("p",[t._v("​\t\t结构出state的内容，我们需要的就是 CollapseReducer 下的isCollapsde属性的值")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2410),alt:"1640931491100"}})]),t._v(" "),r("p",[t._v("​\t在TopHeader在父组件中传过来的值")]),t._v(" "),r("p",[r("img",{attrs:{src:e(2411),alt:"1640931758607"}})]),t._v(" "),r("p",[t._v("​\t有了这个功能---那么我们做展开和折叠的功能就简单多了")])])}),[],!1,null,null,null);s.default=p.exports}}]);