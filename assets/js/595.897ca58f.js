(window.webpackJsonp=window.webpackJsonp||[]).push([[595],{5843:function(t,s,a){t.exports=a.p+"assets/img/image-20220406215903729.f3db6264.png"},5844:function(t,s,a){t.exports=a.p+"assets/img/image-20220406220540064.247b0dc3.png"},5845:function(t,s,a){t.exports=a.p+"assets/img/image-20220406220732029.daa4755b.png"},9332:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_11-方法重载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-方法重载"}},[t._v("#")]),t._v(" 11.方法重载")]),t._v(" "),e("p",[t._v("​\t\t有些情况下，对于不同的参数我们需要不同的方法实现")]),t._v(" "),e("p",[t._v("​\t\t例如：这个计算工资的方法，现在我们把10个小时作为加班时间，但是如果这个员工不加班，过去你会创建一个不同的实现接收所有参数")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5843),alt:"image-20220406215903729"}})]),t._v(" "),e("p",[t._v("方法重载意味着，他的不同实现具有不同参数，我们看一下Employee类")]),t._v(" "),e("p",[t._v("按command + D复制--然后去掉加班时间参数")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5844),alt:"image-20220406220540064"}})]),t._v(" "),e("p",[t._v("另外一种实现是调用计算工资的方法传入0的加班时长")]),t._v(" "),e("p",[e("img",{attrs:{src:a(5845),alt:"image-20220406220732029"}})]),t._v(" "),e("p",[t._v("​\t\t但是请记住，重载方法的次数太多，将使你的程序难以维护，因为最终会遇到很多变化，这些方法会互相调用，结果变的很糟糕。个人而言不想方法太多，可以适当使用但不要过度使用。")])])}),[],!1,null,null,null);s.default=n.exports}}]);