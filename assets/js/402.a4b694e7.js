(window.webpackJsonp=window.webpackJsonp||[]).push([[402],{1319:function(e,t,s){e.exports=s.p+"assets/img/1608737654987.37a27a16.png"},1320:function(e,t,s){e.exports=s.p+"assets/img/1608737737244.7b3d52f7.png"},1321:function(e,t,s){e.exports=s.p+"assets/img/1608737755601.fcc2a2a7.png"},1322:function(e,t,s){e.exports=s.p+"assets/img/1608737763803.00c0bb78.png"},1323:function(e,t,s){e.exports=s.p+"assets/img/1608737773926.7b02f8b8.png"},1324:function(e,t,s){e.exports=s.p+"assets/img/1608737783389.13bc46f8.png"},8224:function(e,t,s){"use strict";s.r(t);var n=s(5),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"springmvc工作原理详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springmvc工作原理详解"}},[e._v("#")]),e._v(" SpringMVC工作原理详解")]),e._v(" "),n("blockquote",[n("p",[e._v("本文整理自网络，原文出处暂不知，对原文做了较大的改动，在此说明！")])]),e._v(" "),n("h3",{attrs:{id:"先来看一下什么是-mvc-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#先来看一下什么是-mvc-模式"}},[e._v("#")]),e._v(" 先来看一下什么是 MVC 模式")]),e._v(" "),n("p",[e._v("MVC 是一种设计模式.")]),e._v(" "),n("p",[n("strong",[e._v("MVC 的原理图如下：")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(1319),alt:"1608737654987"}})]),e._v(" "),n("h3",{attrs:{id:"springmvc-简单介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-简单介绍"}},[e._v("#")]),e._v(" SpringMVC 简单介绍")]),e._v(" "),n("p",[e._v("SpringMVC 框架是以请求为驱动，围绕 Servlet 设计，将请求发给控制器，然后通过模型对象，分派器来展示请求结果视图。其中核心类是 DispatcherServlet，它是一个 Servlet，顶层是实现的Servlet接口。")]),e._v(" "),n("h3",{attrs:{id:"springmvc-使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-使用"}},[e._v("#")]),e._v(" SpringMVC 使用")]),e._v(" "),n("p",[e._v("需要在 web.xml 中配置 DispatcherServlet 。并且需要配置 Spring 监听器ContextLoaderListener")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n<listener>\n\t<listener-class>org.springframework.web.context.ContextLoaderListener\n\t</listener-class>\n</listener>\n<servlet>\n\t<servlet-name>springmvc</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet\n\t</servlet-class>\n\t\x3c!-- 如果不设置init-param标签，则必须在/WEB-INF/下创建xxx-servlet.xml文件，其中xxx是servlet-name中配置的名称。 --\x3e\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:spring/springmvc-servlet.xml</param-value>\n\t</init-param>\n\t<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n\t<servlet-name>springmvc</servlet-name>\n\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("h3",{attrs:{id:"springmvc-工作原理-重要"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-工作原理-重要"}},[e._v("#")]),e._v(" SpringMVC 工作原理（重要）")]),e._v(" "),n("p",[n("strong",[e._v("简单来说：")])]),e._v(" "),n("p",[e._v("客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler-> HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象->前端控制器 DispatcherServlet 渲染数据（Moder）->将得到视图对象返回给用户")]),e._v(" "),n("p",[n("strong",[e._v("如下图所示：")]),e._v(" "),n("img",{attrs:{src:s(1320),alt:"1608737737244"}})]),e._v(" "),n("p",[e._v("上图的一个笔误的小问题：Spring MVC 的入口函数也就是前端控制器 DispatcherServlet 的作用是接收请求，响应结果。")]),e._v(" "),n("p",[n("strong",[e._v("流程说明（重要）：")])]),e._v(" "),n("p",[e._v("（1）客户端（浏览器）发送请求，直接请求到 DispatcherServlet。")]),e._v(" "),n("p",[e._v("（2）DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。")]),e._v(" "),n("p",[e._v("（3）解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。")]),e._v(" "),n("p",[e._v("（4）HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑。")]),e._v(" "),n("p",[e._v("（5）处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。")]),e._v(" "),n("p",[e._v("（6）ViewResolver 会根据逻辑 View 查找实际的 View。")]),e._v(" "),n("p",[e._v("（7）DispaterServlet 把返回的 Model 传给 View（视图渲染）。")]),e._v(" "),n("p",[e._v("（8）把 View 返回给请求者（浏览器）")]),e._v(" "),n("h3",{attrs:{id:"springmvc-重要组件说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-重要组件说明"}},[e._v("#")]),e._v(" SpringMVC 重要组件说明")]),e._v(" "),n("p",[n("strong",[e._v("1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供（重要）")])]),e._v(" "),n("p",[e._v("作用："),n("strong",[e._v("Spring MVC 的入口函数。接收请求，响应结果，相当于转发器，中央处理器。有了 DispatcherServlet 减少了其它组件之间的耦合度。用户请求到达前端控制器，它就相当于mvc模式中的c，DispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet的存在降低了组件之间的耦合性。")])]),e._v(" "),n("p",[n("strong",[e._v("2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供")])]),e._v(" "),n("p",[e._v("作用：根据请求的url查找Handler。HandlerMapping负责根据用户请求找到Handler即处理器（Controller），SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。")]),e._v(" "),n("p",[n("strong",[e._v("3、处理器适配器HandlerAdapter")])]),e._v(" "),n("p",[e._v("作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler\n通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。")]),e._v(" "),n("p",[n("strong",[e._v("4、处理器Handler(需要工程师开发)")])]),e._v(" "),n("p",[e._v("注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler\nHandler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。\n由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。")]),e._v(" "),n("p",[n("strong",[e._v("5、视图解析器View resolver(不需要工程师开发),由框架提供")])]),e._v(" "),n("p",[e._v("作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）\nView Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。\n一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。")]),e._v(" "),n("p",[n("strong",[e._v("6、视图View(需要工程师开发)")])]),e._v(" "),n("p",[e._v("View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf...）")]),e._v(" "),n("p",[n("strong",[e._v("注意：处理器Handler（也就是我们平常说的Controller控制器）以及视图层view都是需要我们自己手动开发的。其他的一些组件比如：前端控制器DispatcherServlet、处理器映射器HandlerMapping、处理器适配器HandlerAdapter等等都是框架提供给我们的，不需要自己手动开发。")])]),e._v(" "),n("h3",{attrs:{id:"dispatcherservlet详细解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dispatcherservlet详细解析"}},[e._v("#")]),e._v(" DispatcherServlet详细解析")]),e._v(" "),n("p",[e._v("首先看下源码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package org.springframework.web.servlet;\n \n@SuppressWarnings("serial")\npublic class DispatcherServlet extends FrameworkServlet {\n \n\tpublic static final String MULTIPART_RESOLVER_BEAN_NAME = "multipartResolver";\n\tpublic static final String LOCALE_RESOLVER_BEAN_NAME = "localeResolver";\n\tpublic static final String THEME_RESOLVER_BEAN_NAME = "themeResolver";\n\tpublic static final String HANDLER_MAPPING_BEAN_NAME = "handlerMapping";\n\tpublic static final String HANDLER_ADAPTER_BEAN_NAME = "handlerAdapter";\n\tpublic static final String HANDLER_EXCEPTION_RESOLVER_BEAN_NAME = "handlerExceptionResolver";\n\tpublic static final String REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME = "viewNameTranslator";\n\tpublic static final String VIEW_RESOLVER_BEAN_NAME = "viewResolver";\n\tpublic static final String FLASH_MAP_MANAGER_BEAN_NAME = "flashMapManager";\n\tpublic static final String WEB_APPLICATION_CONTEXT_ATTRIBUTE = DispatcherServlet.class.getName() + ".CONTEXT";\n\tpublic static final String LOCALE_RESOLVER_ATTRIBUTE = DispatcherServlet.class.getName() + ".LOCALE_RESOLVER";\n\tpublic static final String THEME_RESOLVER_ATTRIBUTE = DispatcherServlet.class.getName() + ".THEME_RESOLVER";\n\tpublic static final String THEME_SOURCE_ATTRIBUTE = DispatcherServlet.class.getName() + ".THEME_SOURCE";\n\tpublic static final String INPUT_FLASH_MAP_ATTRIBUTE = DispatcherServlet.class.getName() + ".INPUT_FLASH_MAP";\n\tpublic static final String OUTPUT_FLASH_MAP_ATTRIBUTE = DispatcherServlet.class.getName() + ".OUTPUT_FLASH_MAP";\n\tpublic static final String FLASH_MAP_MANAGER_ATTRIBUTE = DispatcherServlet.class.getName() + ".FLASH_MAP_MANAGER";\n\tpublic static final String EXCEPTION_ATTRIBUTE = DispatcherServlet.class.getName() + ".EXCEPTION";\n\tpublic static final String PAGE_NOT_FOUND_LOG_CATEGORY = "org.springframework.web.servlet.PageNotFound";\n\tprivate static final String DEFAULT_STRATEGIES_PATH = "DispatcherServlet.properties";\n\tprotected static final Log pageNotFoundLogger = LogFactory.getLog(PAGE_NOT_FOUND_LOG_CATEGORY);\n\tprivate static final Properties defaultStrategies;\n\tstatic {\n\t\ttry {\n\t\t\tClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);\n\t\t\tdefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException("Could not load \'DispatcherServlet.properties\': " + ex.getMessage());\n\t\t}\n\t}\n \n\t/** Detect all HandlerMappings or just expect "handlerMapping" bean? */\n\tprivate boolean detectAllHandlerMappings = true;\n \n\t/** Detect all HandlerAdapters or just expect "handlerAdapter" bean? */\n\tprivate boolean detectAllHandlerAdapters = true;\n \n\t/** Detect all HandlerExceptionResolvers or just expect "handlerExceptionResolver" bean? */\n\tprivate boolean detectAllHandlerExceptionResolvers = true;\n \n\t/** Detect all ViewResolvers or just expect "viewResolver" bean? */\n\tprivate boolean detectAllViewResolvers = true;\n \n\t/** Throw a NoHandlerFoundException if no Handler was found to process this request? **/\n\tprivate boolean throwExceptionIfNoHandlerFound = false;\n \n\t/** Perform cleanup of request attributes after include request? */\n\tprivate boolean cleanupAfterInclude = true;\n \n\t/** MultipartResolver used by this servlet */\n\tprivate MultipartResolver multipartResolver;\n \n\t/** LocaleResolver used by this servlet */\n\tprivate LocaleResolver localeResolver;\n \n\t/** ThemeResolver used by this servlet */\n\tprivate ThemeResolver themeResolver;\n \n\t/** List of HandlerMappings used by this servlet */\n\tprivate List<HandlerMapping> handlerMappings;\n \n\t/** List of HandlerAdapters used by this servlet */\n\tprivate List<HandlerAdapter> handlerAdapters;\n \n\t/** List of HandlerExceptionResolvers used by this servlet */\n\tprivate List<HandlerExceptionResolver> handlerExceptionResolvers;\n \n\t/** RequestToViewNameTranslator used by this servlet */\n\tprivate RequestToViewNameTranslator viewNameTranslator;\n \n\tprivate FlashMapManager flashMapManager;\n \n\t/** List of ViewResolvers used by this servlet */\n\tprivate List<ViewResolver> viewResolvers;\n \n\tpublic DispatcherServlet() {\n\t\tsuper();\n\t}\n \n\tpublic DispatcherServlet(WebApplicationContext webApplicationContext) {\n\t\tsuper(webApplicationContext);\n\t}\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n \n\tprotected void initStrategies(ApplicationContext context) {\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\tinitHandlerMappings(context);\n\t\tinitHandlerAdapters(context);\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n}\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br"),n("span",{staticClass:"line-number"},[e._v("69")]),n("br"),n("span",{staticClass:"line-number"},[e._v("70")]),n("br"),n("span",{staticClass:"line-number"},[e._v("71")]),n("br"),n("span",{staticClass:"line-number"},[e._v("72")]),n("br"),n("span",{staticClass:"line-number"},[e._v("73")]),n("br"),n("span",{staticClass:"line-number"},[e._v("74")]),n("br"),n("span",{staticClass:"line-number"},[e._v("75")]),n("br"),n("span",{staticClass:"line-number"},[e._v("76")]),n("br"),n("span",{staticClass:"line-number"},[e._v("77")]),n("br"),n("span",{staticClass:"line-number"},[e._v("78")]),n("br"),n("span",{staticClass:"line-number"},[e._v("79")]),n("br"),n("span",{staticClass:"line-number"},[e._v("80")]),n("br"),n("span",{staticClass:"line-number"},[e._v("81")]),n("br"),n("span",{staticClass:"line-number"},[e._v("82")]),n("br"),n("span",{staticClass:"line-number"},[e._v("83")]),n("br"),n("span",{staticClass:"line-number"},[e._v("84")]),n("br"),n("span",{staticClass:"line-number"},[e._v("85")]),n("br"),n("span",{staticClass:"line-number"},[e._v("86")]),n("br"),n("span",{staticClass:"line-number"},[e._v("87")]),n("br"),n("span",{staticClass:"line-number"},[e._v("88")]),n("br"),n("span",{staticClass:"line-number"},[e._v("89")]),n("br"),n("span",{staticClass:"line-number"},[e._v("90")]),n("br"),n("span",{staticClass:"line-number"},[e._v("91")]),n("br"),n("span",{staticClass:"line-number"},[e._v("92")]),n("br"),n("span",{staticClass:"line-number"},[e._v("93")]),n("br"),n("span",{staticClass:"line-number"},[e._v("94")]),n("br"),n("span",{staticClass:"line-number"},[e._v("95")]),n("br"),n("span",{staticClass:"line-number"},[e._v("96")]),n("br"),n("span",{staticClass:"line-number"},[e._v("97")]),n("br"),n("span",{staticClass:"line-number"},[e._v("98")]),n("br"),n("span",{staticClass:"line-number"},[e._v("99")]),n("br"),n("span",{staticClass:"line-number"},[e._v("100")]),n("br"),n("span",{staticClass:"line-number"},[e._v("101")]),n("br"),n("span",{staticClass:"line-number"},[e._v("102")]),n("br"),n("span",{staticClass:"line-number"},[e._v("103")]),n("br"),n("span",{staticClass:"line-number"},[e._v("104")]),n("br"),n("span",{staticClass:"line-number"},[e._v("105")]),n("br")])]),n("p",[e._v("DispatcherServlet类中的属性beans：")]),e._v(" "),n("ul",[n("li",[e._v("HandlerMapping：用于handlers映射请求和一系列的对于拦截器的前处理和后处理，大部分用@Controller注解。")]),e._v(" "),n("li",[e._v("HandlerAdapter：帮助DispatcherServlet处理映射请求处理程序的适配器，而不用考虑实际调用的是 哪个处理程序。- - -")]),e._v(" "),n("li",[e._v("ViewResolver：根据实际配置解析实际的View类型。")]),e._v(" "),n("li",[e._v("ThemeResolver：解决Web应用程序可以使用的主题，例如提供个性化布局。")]),e._v(" "),n("li",[e._v("MultipartResolver：解析多部分请求，以支持从HTML表单上传文件。-")]),e._v(" "),n("li",[e._v("FlashMapManager：存储并检索可用于将一个请求属性传递到另一个请求的input和output的FlashMap，通常用于重定向。")])]),e._v(" "),n("p",[e._v("在Web MVC框架中，每个DispatcherServlet都拥自己的WebApplicationContext，它继承了ApplicationContext。WebApplicationContext包含了其上下文和Servlet实例之间共享的所有的基础框架beans。")]),e._v(" "),n("p",[n("strong",[e._v("HandlerMapping")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(1321),alt:"1608737755601"}})]),e._v(" "),n("p",[e._v("HandlerMapping接口处理请求的映射HandlerMapping接口的实现类：")]),e._v(" "),n("ul",[n("li",[e._v("SimpleUrlHandlerMapping类通过配置文件把URL映射到Controller类。")]),e._v(" "),n("li",[e._v("DefaultAnnotationHandlerMapping类通过注解把URL映射到Controller类。")])]),e._v(" "),n("p",[n("strong",[e._v("HandlerAdapter")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(1322),alt:"1608737763803"}})]),e._v(" "),n("p",[e._v("HandlerAdapter接口-处理请求映射")]),e._v(" "),n("p",[e._v("AnnotationMethodHandlerAdapter：通过注解，把请求URL映射到Controller类的方法上。")]),e._v(" "),n("p",[n("strong",[e._v("HandlerExceptionResolver")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(1323),alt:"1608737773926"}})]),e._v(" "),n("p",[e._v("HandlerExceptionResolver接口-异常处理接口")]),e._v(" "),n("ul",[n("li",[e._v("SimpleMappingExceptionResolver通过配置文件进行异常处理。")]),e._v(" "),n("li",[e._v("AnnotationMethodHandlerExceptionResolver：通过注解进行异常处理。")])]),e._v(" "),n("p",[n("strong",[e._v("ViewResolver")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(1324),alt:"1608737783389"}})]),e._v(" "),n("p",[e._v("ViewResolver接口解析View视图。")]),e._v(" "),n("p",[e._v("UrlBasedViewResolver类 通过配置文件，把一个视图名交给到一个View来处理。")])])}),[],!1,null,null,null);t.default=a.exports}}]);