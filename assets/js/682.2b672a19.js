(window.webpackJsonp=window.webpackJsonp||[]).push([[682],{5538:function(t,s,a){t.exports=a.p+"assets/img/1608657458607.95c20998.png"},8950:function(t,s,a){"use strict";a.r(s);var n=a(5),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"java集合框架常见面试题总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java集合框架常见面试题总结"}},[t._v("#")]),t._v(" Java集合框架常见面试题总结")]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"#list%EF%BC%8Csetmap%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E6%80%BB%E7%BB%93"}},[t._v("List，Set,Map三者的区别及总结")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#arraylist-%E4%B8%8E-linkedlist-%E5%8C%BA%E5%88%AB"}},[t._v("Arraylist 与 LinkedList 区别")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#arraylist-%E4%B8%8E-vector-%E5%8C%BA%E5%88%AB"}},[t._v("ArrayList 与 Vector 区别（为什么要用Arraylist取代Vector呢？）")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#hashmap-%E5%92%8C-hashtable-%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("HashMap 和 Hashtable 的区别")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#hashset-%E5%92%8C-hashmap-%E5%8C%BA%E5%88%AB"}},[t._v("HashSet 和 HashMap 区别")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#hashmap-%E5%92%8C-concurrenthashmap-%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("HashMap 和 ConcurrentHashMap 的区别")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#hashset%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E9%87%8D%E5%A4%8D"}},[t._v("HashSet如何检查重复")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#comparable-%E5%92%8C-comparator%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("comparable 和 comparator的区别")]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"#comparator%E5%AE%9A%E5%88%B6%E6%8E%92%E5%BA%8F"}},[t._v("Comparator定制排序")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E9%87%8D%E5%86%99compareto%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%8C%89%E5%B9%B4%E9%BE%84%E6%9D%A5%E6%8E%92%E5%BA%8F"}},[t._v("重写compareTo方法实现按年龄来排序")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E5%AF%B9object%E7%9A%84list%E6%8E%92%E5%BA%8F"}},[t._v("如何对Object的list排序？")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E4%B8%8Elist%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2"}},[t._v("如何实现数组与List的相互转换？")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E6%B1%82arraylist%E9%9B%86%E5%90%88%E7%9A%84%E4%BA%A4%E9%9B%86-%E5%B9%B6%E9%9B%86-%E5%B7%AE%E9%9B%86-%E5%8E%BB%E9%87%8D%E5%A4%8D%E5%B9%B6%E9%9B%86"}},[t._v("如何求ArrayList集合的交集 并集 差集 去重复并集")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#hashmap-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0"}},[t._v("HashMap 的工作原理及代码实现")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#concurrenthashmap-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0"}},[t._v("ConcurrentHashMap 的工作原理及代码实现")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93"}},[t._v("集合框架底层数据结构总结")]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"#--collection"}},[t._v("- Collection")]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"#1-list"}},[t._v("1. List")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#2-set"}},[t._v("2. Set")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#--map"}},[t._v("- Map")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E9%9B%86%E5%90%88%E7%9A%84%E9%80%89%E7%94%A8"}},[t._v("集合的选用")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E9%9B%86%E5%90%88%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95"}},[t._v("集合的常用方法")])])]),t._v(" "),n("h2",{attrs:{id:"list-set-map三者的区别及总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list-set-map三者的区别及总结"}},[t._v("#")]),t._v(" List，Set,Map三者的区别及总结")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("List：对付顺序的好帮手")])]),t._v(" "),n("p",[t._v("List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Set:注重独一无二的性质")])]),t._v(" "),n("p",[t._v("不允许重复的集合。不会有多个元素引用相同的对象。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Map:用Key来搜索的专家")])]),t._v(" "),n("p",[t._v("使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。")])])]),t._v(" "),n("h2",{attrs:{id:"arraylist-与-linkedlist-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-linkedlist-区别"}},[t._v("#")]),t._v(" Arraylist 与 LinkedList 区别")]),t._v(" "),n("p",[t._v("Arraylist底层使用的是数组（存读数据效率高，插入删除特定位置效率低），LinkedList 底层使用的是双向链表数据结构（插入，删除效率特别高）（JDK1.6之前为循环链表，JDK1.7取消了循环。注意双向链表和双向循环链表的区别：）； 详细可阅读JDK1.7-LinkedList循环链表优化。学过数据结构这门课后我们就知道采用链表存储，插入，删除元素时间复杂度不受元素位置的影响，都是近似O（1）而数组为近似O（n），因此当数据特别多，而且经常需要插入删除元素时建议选用LinkedList.一般程序只用Arraylist就够用了，因为一般数据量都不会蛮大，Arraylist是使用最多的集合类。")]),t._v(" "),n("h2",{attrs:{id:"arraylist-与-vector-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-vector-区别"}},[t._v("#")]),t._v(" ArrayList 与 Vector 区别")]),t._v(" "),n("p",[t._v("Vector类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问Vector\n，代码要在同步操作上耗费大量的时间。Arraylist不是同步的，所以在不需要同步时建议使用Arraylist。")]),t._v(" "),n("h2",{attrs:{id:"hashmap-和-hashtable-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashtable-的区别"}},[t._v("#")]),t._v(" HashMap 和 Hashtable 的区别")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("HashMap是非线程安全的，HashTable是线程安全的；HashTable内部的方法基本都经过synchronized修饰。")])]),t._v(" "),n("li",[n("p",[t._v("因为线程安全的问题，HashMap要比HashTable效率高一点，HashTable基本被淘汰。")])]),t._v(" "),n("li",[n("p",[t._v("HashMap允许有null值的存在，而在HashTable中put进的键值只要有一个null，直接抛出NullPointerException。")])])]),t._v(" "),n("p",[t._v("Hashtable和HashMap有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用Java5或以上的话，请使用ConcurrentHashMap吧")]),t._v(" "),n("h2",{attrs:{id:"hashset-和-hashmap-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashset-和-hashmap-区别"}},[t._v("#")]),t._v(" HashSet 和 HashMap 区别")]),t._v(" "),n("p",[n("img",{attrs:{src:a(5538),alt:"1608657458607"}})]),t._v(" "),n("h2",{attrs:{id:"hashmap-和-concurrenthashmap-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-concurrenthashmap-的区别"}},[t._v("#")]),t._v(" HashMap 和 ConcurrentHashMap 的区别")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/xuefeng0707/article/details/40834595",target:"_blank",rel:"noopener noreferrer"}},[t._v("HashMap与ConcurrentHashMap的区别"),n("OutboundLink")],1)]),t._v(" "),n("ol",[n("li",[t._v("ConcurrentHashMap对整个桶数组进行了分割分段(Segment)，然后在每一个分段上都用lock锁进行保护，相对于HashTable的synchronized锁的粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的。（JDK1.8之后ConcurrentHashMap启用了一种全新的方式实现,利用CAS算法。）")]),t._v(" "),n("li",[t._v("HashMap的键值对允许有null，但是ConCurrentHashMap都不允许。")])]),t._v(" "),n("h2",{attrs:{id:"hashset如何检查重复"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashset如何检查重复"}},[t._v("#")]),t._v(" HashSet如何检查重复")]),t._v(" "),n("p",[t._v("当你把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会与其他加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用equals（）方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让加入操作成功。（摘自我的Java启蒙书《Head fist java》第二版）")]),t._v(" "),n("p",[n("strong",[t._v("hashCode（）与equals（）的相关规定：")])]),t._v(" "),n("ol",[n("li",[t._v("如果两个对象相等，则hashcode一定也是相同的")]),t._v(" "),n("li",[t._v("两个对象相等,对两个equals方法返回true")]),t._v(" "),n("li",[t._v("两个对象有相同的hashcode值，它们也不一定是相等的")]),t._v(" "),n("li",[t._v("综上，equals方法被覆盖过，则hashCode方法也必须被覆盖")]),t._v(" "),n("li",[t._v("hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。")])]),t._v(" "),n("p",[n("strong",[t._v("==与equals的区别")])]),t._v(" "),n("ol",[n("li",[t._v("==是判断两个变量或实例是不是指向同一个内存空间    equals是判断两个变量或实例所指向的内存空间的值是不是相同")]),t._v(" "),n("li",[t._v("==是指对内存地址进行比较    equals()是对字符串的内容进行比较")]),t._v(" "),n("li",[t._v("==指引用是否相同    equals()指的是值是否相同")])]),t._v(" "),n("h2",{attrs:{id:"comparable-和-comparator的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator的区别"}},[t._v("#")]),t._v(" comparable 和 comparator的区别")]),t._v(" "),n("ul",[n("li",[t._v("comparable接口实际上是出自java.lang包 它有一个 compareTo(Object obj)方法用来排序")]),t._v(" "),n("li",[t._v("comparator接口实际上是出自 java.util 包它有一个compare(Object obj1, Object obj2)方法用来排序")])]),t._v(" "),n("p",[t._v("一般我们需要对一个集合使用自定义排序时，我们就要重写compareTo方法或compare方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写compareTo方法和使用自制的Comparator方法或者以两个Comparator来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的Collections.sort().")]),t._v(" "),n("h3",{attrs:{id:"comparator定制排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comparator定制排序"}},[t._v("#")]),t._v(" Comparator定制排序")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n/**\n * TODO Collections类方法测试之排序\n * @author 寇爽\n * @date 2017年11月20日\n * @version 1.8\n */\npublic class CollectionsSort {\n\n\tpublic static void main(String[] args) {\n\n\t\tArrayList<Integer> arrayList = new ArrayList<Integer>();\n\t\tarrayList.add(-1);\n\t\tarrayList.add(3);\n\t\tarrayList.add(3);\n\t\tarrayList.add(-5);\n\t\tarrayList.add(7);\n\t\tarrayList.add(4);\n\t\tarrayList.add(-9);\n\t\tarrayList.add(-7);\n\t\tSystem.out.println("原始数组:");\n\t\tSystem.out.println(arrayList);\n\t\t// void reverse(List list)：反转\n\t\tCollections.reverse(arrayList);\n\t\tSystem.out.println("Collections.reverse(arrayList):");\n\t\tSystem.out.println(arrayList);\n/*\t\t\n\t\t * void rotate(List list, int distance),旋转。\n\t\t * 当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将\n\t\t * list的前distance个元素整体移到后面。\n\t\t \n\t\tCollections.rotate(arrayList, 4);\n\t\tSystem.out.println("Collections.rotate(arrayList, 4):");\n\t\tSystem.out.println(arrayList);*/\n\t\t\n\t\t// void sort(List list),按自然排序的升序排序\n\t\tCollections.sort(arrayList);\n\t\tSystem.out.println("Collections.sort(arrayList):");\n\t\tSystem.out.println(arrayList);\n\n\t\t// void shuffle(List list),随机排序\n\t\tCollections.shuffle(arrayList);\n\t\tSystem.out.println("Collections.shuffle(arrayList):");\n\t\tSystem.out.println(arrayList);\n\n\t\t// 定制排序的用法\n\t\tCollections.sort(arrayList, new Comparator<Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\treturn o2.compareTo(o1);\n\t\t\t}\n\t\t});\n\t\tSystem.out.println("定制排序后：");\n\t\tSystem.out.println(arrayList);\n\t}\n\n}\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br")])]),n("h3",{attrs:{id:"重写compareto方法实现按年龄来排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重写compareto方法实现按年龄来排序"}},[t._v("#")]),t._v(" 重写compareTo方法实现按年龄来排序")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package map;\n\nimport java.util.Set;\nimport java.util.TreeMap;\n\npublic class TreeMap2 {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tTreeMap<Person, String> pdata = new TreeMap<Person, String>();\n\t\tpdata.put(new Person("张三", 30), "zhangsan");\n\t\tpdata.put(new Person("李四", 20), "lisi");\n\t\tpdata.put(new Person("王五", 10), "wangwu");\n\t\tpdata.put(new Person("小红", 5), "xiaohong");\n\t\t// 得到key的值的同时得到key所对应的值\n\t\tSet<Person> keys = pdata.keySet();\n\t\tfor (Person key : keys) {\n\t\t\tSystem.out.println(key.getAge() + "-" + key.getName());\n\n\t\t}\n\t}\n}\n\n// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列\n// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他\n// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了\n\nclass Person implements Comparable<Person> {\n\tprivate String name;\n\tprivate int age;\n\n\tpublic Person(String name, int age) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\n\t/**\n\t * TODO重写compareTo方法实现按年龄来排序\n\t */\n\t@Override\n\tpublic int compareTo(Person o) {\n\t\t// TODO Auto-generated method stub\n\t\tif (this.age > o.getAge()) {\n\t\t\treturn 1;\n\t\t} else if (this.age < o.getAge()) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn age;\n\t}\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br")])]),n("h2",{attrs:{id:"如何对object的list排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何对object的list排序"}},[t._v("#")]),t._v(" 如何对Object的list排序")]),t._v(" "),n("ul",[n("li",[t._v("对objects数组进行排序，我们可以用Arrays.sort()方法")]),t._v(" "),n("li",[t._v("对objects的集合进行排序，需要使用Collections.sort()方法")])]),t._v(" "),n("h2",{attrs:{id:"如何实现数组与list的相互转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何实现数组与list的相互转换"}},[t._v("#")]),t._v(" 如何实现数组与List的相互转换")]),t._v(" "),n("p",[t._v("List转数组：toArray(arraylist.size()方法；数组转List:Arrays的asList(a)方法")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('List<String> arrayList = new ArrayList<String>();\n\t\tarrayList.add("s");\n\t\tarrayList.add("e");\n\t\tarrayList.add("n");\n\t\t/**\n\t\t * ArrayList转数组\n\t\t */\n\t\tint size=arrayList.size();\n\t\tString[] a = arrayList.toArray(new String[size]);\n\t\t//输出第二个元素\n\t\tSystem.out.println(a[1]);//结果：e\n\t\t//输出整个数组\n\t\tSystem.out.println(Arrays.toString(a));//结果：[s, e, n]\n\t\t/**\n\t\t * 数组转list\n\t\t */\n\t\tList<String> list=Arrays.asList(a);\n\t\t/**\n\t\t * list转Arraylist\n\t\t */\n\t\tList<String> arrayList2 = new ArrayList<String>();\n\t\tarrayList2.addAll(list);\n\t\tSystem.out.println(list);\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br")])]),n("h2",{attrs:{id:"如何求arraylist集合的交集-并集-差集-去重复并集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何求arraylist集合的交集-并集-差集-去重复并集"}},[t._v("#")]),t._v(" 如何求ArrayList集合的交集 并集 差集 去重复并集")]),t._v(" "),n("p",[t._v("需要用到List接口中定义的几个方法：")]),t._v(" "),n("ul",[n("li",[t._v("addAll(Collection<? extends E> c) :按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾\n实例代码：")]),t._v(" "),n("li",[t._v("retainAll(Collection<?> c): 仅保留此列表中包含在指定集合中的元素。")]),t._v(" "),n("li",[t._v("removeAll(Collection<?> c) :从此列表中删除指定集合中包含的所有元素。")])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n *TODO 两个集合之间求交集 并集 差集 去重复并集\n * @author 寇爽\n * @date 2017年11月21日\n * @version 1.8\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodDemo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO Auto-generated method stub")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并集")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// list1.addAll(list2);")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交集")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//list1.retainAll(list2);")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 差集")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// list1.removeAll(list2);")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无重复并集")]),t._v("\n\t\tlist2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tlist1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" list1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br")])]),n("h2",{attrs:{id:"hashmap-的工作原理及代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的工作原理及代码实现"}},[t._v("#")]),t._v(" HashMap 的工作原理及代码实现")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/post/5ab0568b5188255580020e56",target:"_blank",rel:"noopener noreferrer"}},[t._v("集合框架源码学习之HashMap(JDK1.8)"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"concurrenthashmap-的工作原理及代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-的工作原理及代码实现"}},[t._v("#")]),t._v(" ConcurrentHashMap 的工作原理及代码实现")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://www.cnblogs.com/chengxiao/p/6842045.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrentHashMap实现原理及源码分析"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"集合框架底层数据结构总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合框架底层数据结构总结"}},[t._v("#")]),t._v(" 集合框架底层数据结构总结")]),t._v(" "),n("h3",{attrs:{id:"collection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" - Collection")]),t._v(" "),n("h4",{attrs:{id:"_1-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-list"}},[t._v("#")]),t._v(" 1. List")]),t._v(" "),n("ul",[n("li",[t._v("Arraylist：数组（查询快,增删慢   线程不安全,效率高  ）")]),t._v(" "),n("li",[t._v("Vector：数组（查询快,增删慢 线程安全,效率低  ）")]),t._v(" "),n("li",[t._v("LinkedList：链表（查询慢,增删快  线程不安全,效率高  ）")])]),t._v(" "),n("h4",{attrs:{id:"_2-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-set"}},[t._v("#")]),t._v(" 2. Set")]),t._v(" "),n("ul",[n("li",[t._v("HashSet（无序，唯一）:哈希表或者叫散列集(hash table)")]),t._v(" "),n("li",[t._v("LinkedHashSet：链表和哈希表组成 。 由链表保证元素的排序 ， 由哈希表证元素的唯一性")]),t._v(" "),n("li",[t._v("TreeSet（有序，唯一）：红黑树(自平衡的排序二叉树。)")])]),t._v(" "),n("h3",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" - Map")]),t._v(" "),n("ul",[n("li",[t._v("HashMap：基于哈希表的Map接口实现（哈希表对键进行散列，Map结构即映射表存放键值对）")]),t._v(" "),n("li",[t._v("LinkedHashMap:HashMap  的基础上加上了链表数据结构")]),t._v(" "),n("li",[t._v("HashTable:哈希表")]),t._v(" "),n("li",[t._v("TreeMap:红黑树（自平衡的排序二叉树）")])]),t._v(" "),n("h2",{attrs:{id:"集合的选用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合的选用"}},[t._v("#")]),t._v(" 集合的选用")]),t._v(" "),n("p",[t._v("主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用Map接口下的集合，需要排序时选择TreeMap,不需要排序时就选择HashMap,需要保证线程安全就选用ConcurrentHashMap.当我们只需要存放元素值时，就选择实现Collection接口的集合，需要保证元素唯一时选择实现Set接口的集合比如TreeSet或HashSet，不需要就选择实现List接口的比如ArrayList或LinkedList，然后再根据实现这些接口的集合的特点来选用。")]),t._v(" "),n("p",[t._v("2018/3/11更新")]),t._v(" "),n("h2",{attrs:{id:"集合的常用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合的常用方法"}},[t._v("#")]),t._v(" 集合的常用方法")]),t._v(" "),n("p",[t._v("今天下午无意看见一道某大厂的面试题，面试题的内容就是问你某一个集合常见的方法有哪些。虽然平时也经常见到这些集合，但是猛一下让我想某一个集合的常用的方法难免会有遗漏或者与其他集合搞混，所以建议大家还是照着API文档把常见的那几个集合的常用方法看一看。")]),t._v(" "),n("p",[t._v("会持续更新。。。")]),t._v(" "),n("p",[n("strong",[t._v("参考书籍：")])]),t._v(" "),n("p",[t._v("《Head first java 》第二版 推荐阅读真心不错 （适合基础较差的）")]),t._v(" "),n("p",[t._v("《Java核心技术卷1》推荐阅读真心不错 （适合基础较好的）")]),t._v(" "),n("p",[t._v("《算法》第四版 （适合想对数据结构的Java实现感兴趣的）")])])}),[],!1,null,null,null);s.default=r.exports}}]);